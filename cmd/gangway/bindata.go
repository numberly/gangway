// Code generated by "esc -o cmd/gangway/bindata.go templates/"; DO NOT EDIT.

package main

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/templates/commandline.tmpl": {
		local:   "templates/commandline.tmpl",
		size:    4231,
		modtime: 1537699763,
		compressed: `
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
ujykdw7PBp1dtxp09m+H/wQAAP//NwjBE4cQAAA=
`,
	},

	"/templates/home.tmpl": {
		local:   "templates/home.tmpl",
		size:    2088,
		modtime: 1537699499,
		compressed: `
H4sIAAAAAAAC/4xWUW/jNgx+76/g6V42LLKbuxXYcnaGrd2AYnfrgHYH7JGWGZutLPkkOW5u2H8fJMdJ
mhuwBUgsUhT5kR9ppXh1c3f98OfvP0MbOr2+KOIDNJqmFGREVBDW6wuAoqOA0IbQS/o08LYU19YEMkE+
7HoSoCapFIGeQx7dvAPVovMUyj8efpHfifzoxmBHpdgyjb114eTwyHVoy5q2rEgmYQFsODBq6RVqKpcL
6PCZu6GbFdnl3nXgoGndoGlG3BX5JF7EnVdSwvX9PYCUyVKzeYLW0aYUMSO/yvONNcFnjbWNJuzZZ8p2
OStrfthgx3pXfsBAjlF/c6us8QIc6VL4sNPkW6Igjo7Pd84iqdo8+kxpO9QbjY5SJHzE51xz5fNuH4c/
U36ZLS8vsze58i/0WccmU95PMVOkuALoHWUV+hb+SmL8VKieGmcHU0tltXUrqDSqp3cHg7329bffb6q3
V0d9LIj0/JlW4DvU+mxnqsoKrq3xVqNffLAGlV28HxTXuFfT4j1X5DCwNfDBGru4oUf8OMA9Gj8pfuLg
gyPs4CM5PNm4toNjcvAbjQvorLG+R0VHFHZLbqPtuAIcgj3qR+tqOTrsV2Cs6/AE+NhyIJn8rGKtpp2/
L9Iji2TLSlv1tC9fj3XNplnBJSyv+ufZ+tw4m5mRUelPan9SQjYtOQ6zjyLfs1bk04AVla13iU6DW1Aa
vS+F5qYNstIDQfwR4KymUhjccpNqKibai5oPZwxuU/Y9uTRWyIacWBcIXJdC28bKo3rfma/FfLpyaGoZ
rcRxkHC9z6gY9GzoIjRouSZpjeyolvFgbceIaTbPB30UBp0QRHydrVjTIaiPXgxuz0/u13hEWWNAiSrw
FgP5f3VWDSFYE3tdY+9JrAuet17yJNYdmaHIeX3IsMhr3iYScoPT4qSynlTqY2Nlj7WsbBApIzY1PcsK
TSr0F4SckDBnVLl1/M5iu5xtYy9E3sgEclCjeyIj3x6ogF+HipyhQB5+HEJLJrBKjVDk7fLg7yS4s+Pe
2yF6DHh1HtBq8Ms3kBpOrB9a9jAE1hx2MLLW0JLuYWeHOGtzWIKRQxu17hSY0oOP6NMmGrjrydzexBeC
IRXgq7vbm+uvIU5uBvfcGGADwUJDAXxAF6jOiry9OmQzc/L/UpubJde2YSMmhmJbahs5S81x7JVgpEbX
EIy4JS9ps4kQJyHVYpq7dcJ5a05H4QWsmdDzLkqLqD3cQnCvHPfB7y8inyTwTp3cD7am7PHTQG6XroZp
Kd9ky2yZ3vyPXqyLfDr6hZfHlzfFf9nGy/XMKCGfXkdFPv0tuPgnAAD//yEDNLMoCAAA
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/templates": {
		isDir: true,
		local: "templates",
	},
}
