// Code generated by go-bindata.
// sources:
// templates/commandline.tmpl
// templates/home.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesCommandlineTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x6f\x6f\xdb\x36\x13\x7f\xfd\xe4\x53\x5c\xd5\x02\x6d\x51\xd3\x4c\x9f\xa6\x0f\x9e\xb9\x92\x0b\x2c\xe9\x86\x6c\x69\x33\x34\x69\x8b\x01\x7b\xd1\x13\x79\xb6\x2e\xa6\x48\x8d\xa4\xec\xb8\x59\xbe\xfb\x40\x29\x8e\xff\x24\x6d\x07\x4c\x2f\x2c\xf3\xfe\xfe\xee\xf8\x3b\x52\xf9\x83\xa3\xd3\xc3\xf3\xdf\x7f\x7b\x03\x55\xac\xcd\x78\x2f\x4f\x2f\x30\x68\xa7\x45\x46\x36\x4b\x02\x42\x3d\xde\x03\xc8\x6b\x8a\x08\x55\x8c\x8d\xa0\x3f\x5b\x9e\x17\xd9\xa1\xb3\x91\x6c\x14\xe7\xcb\x86\x32\x50\xfd\xaa\xc8\x22\x5d\x46\x99\xc2\xbc\x02\x55\xa1\x0f\x14\x8b\x0f\xe7\x3f\x89\xff\x67\x72\x1d\xc6\x62\x4d\x45\x36\x67\x5a\x34\xce\xc7\x0d\xe7\x05\xeb\x58\x15\x9a\xe6\xac\x48\x74\x8b\x01\xb0\xe5\xc8\x68\x44\x50\x68\xa8\x78\x3e\x80\x1a\x2f\xb9\x6e\xeb\x95\x60\xb8\x7f\x13\x3a\x72\x34\x34\xfe\x19\xed\x74\x81\xcb\x5c\xf6\xcb\xbd\xa4\x79\x20\x04\x1c\x9e\x9d\x01\x08\xd1\x59\x1a\xb6\x33\xa8\x3c\x4d\x8a\x2c\x55\x14\x46\x52\x4e\x9c\x8d\x61\x38\x75\x6e\x6a\x08\x1b\x0e\x43\xe5\x6a\xc9\xca\xd9\xd7\x13\xac\xd9\x2c\x8b\xb7\x18\xc9\x33\x9a\x67\xc7\xca\xd9\x90\x81\x27\x53\x64\x21\x2e\x0d\x85\x8a\x28\x66\xeb\xc0\xbb\x9a\x9d\x4c\x4a\xdb\x8b\x30\x54\xc6\xb5\x7a\x62\xd0\x53\x97\x09\x2f\xf0\x52\x1a\x2e\x83\xac\x6f\xf2\xf0\x17\x92\xfb\xc3\xe7\xfb\xfb\xc3\xff\x4a\x15\xb6\xe4\xc3\x9a\xed\x50\x85\xd0\xe5\x04\xc8\xbb\x5c\xfd\xff\xf4\x34\x9e\x86\x25\x86\x0a\xae\x6e\x45\xe9\x29\x51\xcd\xa6\xde\xb5\x56\x0b\xe5\x8c\xf3\x23\x28\x0d\xaa\xd9\xab\x2d\xa3\x1b\xcd\xc3\x83\x1f\x26\xe5\x8b\x97\xdb\xba\xd4\x22\x11\xf8\x0b\x8d\x20\xd4\x68\xcc\x3d\xda\xbe\x57\x23\x38\x74\x36\x38\x83\x61\xf0\xd6\x59\x54\x6e\x70\xd2\x2a\xd6\x78\x23\xa6\xc1\x09\x97\xe4\x31\xb2\xb3\xf0\xd6\x59\x37\x38\xa2\x0b\xfc\xd8\xc2\x19\xda\xd0\x0b\x7e\xe4\x18\xa2\x27\xac\xe1\x23\x79\xdc\x50\x1c\xba\xd6\x33\x79\x78\x47\x8b\x01\xd4\xce\xba\xd0\xa0\xa2\x6d\x24\x6e\x4e\x7e\x62\xdc\x62\x04\xd8\x46\xb7\xad\x5b\x38\xaf\xc5\xc2\x63\x33\x02\xeb\x7c\x8d\x3b\x45\x2c\x2a\x8e\x24\xba\x98\xa3\xd4\xc7\xce\x74\x6d\x72\xdd\xf7\x5b\xde\x34\x3c\x97\xab\xe9\x00\xc8\x4b\xa7\x97\xeb\x3d\xc8\x2d\xce\x41\x19\x0c\xa1\xc8\x0c\x4f\xab\x28\x4a\xd3\x12\xa4\x9f\x0c\xbc\x33\x54\x64\x16\xe7\x3c\xed\x9a\x90\x8d\xb7\x40\xe4\x9a\x6f\x7d\x2d\xce\x3b\x0c\x0d\xf9\x6e\x4a\x90\x2d\xf9\x6c\x9c\x23\xb0\x2e\x32\xe3\xa6\x4e\xac\xc5\x37\x44\x7b\x98\xad\xbc\x4b\x8f\x56\x8b\x64\x95\xad\xe7\x02\x77\xb2\xb5\x66\x65\xee\x13\x50\xa8\x58\x93\x70\x56\xd4\xa4\x45\x72\xd7\x6e\xb1\x8b\xb0\xf3\x33\x9c\x60\x6c\x73\xfb\x62\x11\x87\xec\xe4\xeb\x39\x9a\x96\x8a\xab\x2b\x18\x1e\x1f\x9d\xbb\x19\x59\xb8\xbe\xce\xc6\x47\xa4\x9c\x26\xf8\xe5\xd3\x79\x42\x91\x4b\xc3\xdf\x09\x2b\x13\xf4\x36\x66\xe3\x93\xee\x7d\xbf\x57\x2e\x5b\xd3\x8d\xf9\x76\x4d\xa9\x3f\xa9\x7b\xb5\x2b\xd9\xd0\x6d\x4b\x42\xaa\xce\xe2\xfc\x7b\x15\x3d\xfc\x3e\xdc\x3e\xf1\x96\x64\xed\x0d\x1a\x23\x0a\x54\x91\xe7\x18\x29\xdc\x8b\xa5\x6c\x63\x74\x36\x4d\xa3\xc1\x26\x50\x36\xce\x79\xa5\x5a\x4d\xbb\xe0\xee\xb4\x19\xd7\x64\xdb\x5c\xf2\xf8\xee\xf6\x49\xcd\xf3\x0d\xde\x49\x8b\x1b\xcb\xbd\xfb\x38\xb5\xc1\xa3\xed\x50\xd5\xc1\xca\x24\xf1\x3a\x31\x8e\x6c\x24\x0f\x1a\xfd\x8c\xac\x78\x71\x4f\xcf\x3e\x91\x51\xae\x26\x48\x5b\xfd\x21\x90\x4f\x27\x3b\x5c\x5f\x0f\x77\x30\x56\x07\xbb\xa9\x5e\xde\x8d\x75\x6c\xc1\xf9\x94\x36\x3a\x98\x52\x04\xe5\xea\xba\xe3\x2f\x5b\x02\x54\x8a\x42\x48\xaa\x58\xf5\xe9\x0e\x4d\x1b\x22\xf9\x77\x7d\x46\xf8\xb5\x2d\xc9\x5b\x8a\x14\x40\xf5\x9a\x01\x2c\x5d\x0b\x0b\x36\x06\x2c\x91\x4e\xbe\xca\xd9\x09\x4f\x5b\x4f\x70\xda\x90\x3d\x3e\x4a\x27\x92\x25\x15\xe1\xc9\xe9\xf1\xd1\xe1\xd3\x74\x60\x54\x64\x59\xf5\x67\xd3\xc4\xf9\x14\xc2\x83\x32\x4c\x36\xde\x29\xea\xe5\x78\xb7\x84\x6d\x8b\xd2\xef\x54\xdd\xdc\x2d\xfa\xbc\xa2\x2d\xe8\x9b\x35\xb7\x91\x0d\xc7\xe5\x00\x66\x6d\x49\x2a\x9a\x74\xf5\x2d\xa1\x24\x60\x1b\x22\x1a\x43\x1a\x0c\xcf\x08\x82\x1b\xed\x40\xbb\x4d\xb4\xb7\xf7\x9f\x1d\x58\x79\xe3\xe9\x96\x80\x18\xaa\x6c\xbc\xf7\x08\x54\xeb\x0d\x88\x93\x53\x58\x0d\x72\x88\xce\xe3\x94\x76\x2f\xc4\xd9\x2d\x52\xe1\xc9\x10\x06\x92\xab\xf7\xe7\x3e\x46\xf8\x17\x21\x42\xc4\xd2\xd0\x30\x5e\xc6\xcf\xb2\x64\x2b\x1f\x3d\x69\x3b\x3e\xfd\x05\xb8\x98\xc1\xe3\xab\xc6\xb3\x8d\x10\x9d\x71\x0b\xf2\x4f\x1e\xed\x3f\xbd\x7e\xfc\x54\x62\xad\xff\x77\x20\x6f\x3a\x94\x4a\xa9\x6a\xa7\xe1\xd9\x25\x0c\x37\x84\xa1\xd5\x0e\xea\xf9\x5a\x06\xb2\x0d\x5e\x1a\xa7\xd0\x74\xa9\x56\xa6\xdb\x5d\xf4\xb4\x3b\x6c\xf7\xec\xe0\xa9\x55\xb4\xda\x21\xe0\xb0\xde\x9c\x9e\x7f\x69\xcb\xe8\x92\x54\x1b\xa9\xa3\xee\xc4\x19\xe3\x16\x6c\xa7\xa3\x5c\x96\xdf\x0e\x7f\xef\x56\xad\x32\xf5\x54\x86\x40\x51\x28\x4f\x9a\x6c\xfa\x48\x0a\xdd\x64\xbc\xa9\x91\x4d\x9a\x09\xf8\xa3\x0b\x27\x44\xe2\xb5\x68\xbc\x9b\xb3\x26\x5f\x38\xd6\xea\x2b\x3a\x81\x7e\x5a\xb0\x6e\x04\x87\xd0\x92\x17\xad\x37\xfd\x31\xde\x2d\x3f\xbc\x3f\xf9\x7a\xd8\xce\xb5\x9f\x14\xc1\xba\xe8\x47\x34\xad\x8e\x8f\xfe\x99\x53\x20\xe5\x29\x6e\x38\x9e\x75\x82\xe4\xfc\x75\x5f\x4f\x13\x4f\xa1\x12\x31\xdd\x32\x9d\xef\xfb\x5e\xb2\xba\x76\xbe\x59\xe7\x86\xdb\xfa\xa2\xfa\x06\x09\x36\x4e\xdb\x5c\xf6\x37\x7e\x2e\xfb\x4f\xe7\xbf\x03\x00\x00\xff\xff\xd7\xec\x35\xf0\x4b\x0b\x00\x00")

func templatesCommandlineTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesCommandlineTmpl,
		"templates/commandline.tmpl",
	)
}

func templatesCommandlineTmpl() (*asset, error) {
	bytes, err := templatesCommandlineTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/commandline.tmpl", size: 2891, mode: os.FileMode(420), modTime: time.Unix(1516121854, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHomeTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x56\x61\x6f\xe3\x36\x0f\xfe\xde\x5f\xc1\xd3\x7d\x79\x5f\x2c\xb2\x9b\xbb\x15\xd8\x72\x76\x86\xad\xdd\x86\x62\x77\xeb\x80\x76\x07\xec\x23\x2d\x33\x36\x5b\x59\xf2\x49\x72\xdc\xdc\xb0\xff\x3e\x48\x8e\x93\x34\x37\x60\x0b\x90\x58\xa4\x28\xf2\x21\x1f\xd2\x4a\xf1\xea\xe6\xee\xfa\xe1\x8f\xdf\x7e\x84\x36\x74\x7a\x7d\x51\xc4\x07\x68\x34\x4d\x29\xc8\x88\xa8\x20\xac\xd7\x17\x00\x45\x47\x01\xa1\x0d\xa1\x97\xf4\x69\xe0\x6d\x29\xae\xad\x09\x64\x82\x7c\xd8\xf5\x24\x40\x4d\x52\x29\x02\x3d\x87\x3c\xba\x79\x07\xaa\x45\xe7\x29\x94\xbf\x3f\xfc\x24\xbf\x11\xf9\xd1\x8d\xc1\x8e\x4a\xb1\x65\x1a\x7b\xeb\xc2\xc9\xe1\x91\xeb\xd0\x96\x35\x6d\x59\x91\x4c\xc2\x02\xd8\x70\x60\xd4\xd2\x2b\xd4\x54\x2e\x17\xd0\xe1\x33\x77\x43\x37\x2b\xb2\xcb\xbd\xeb\xc0\x41\xd3\xfa\x67\x34\xcd\x88\xbb\x22\x9f\xc4\x8b\xb8\xf3\x4a\x4a\xb8\xbe\xbf\x07\x90\x32\x59\x6a\x36\x4f\xd0\x3a\xda\x94\x22\x66\xe4\x57\x79\xbe\xb1\x26\xf8\xac\xb1\xb6\xd1\x84\x3d\xfb\x4c\xd9\x2e\x67\x65\xcd\x77\x1b\xec\x58\xef\xca\x0f\x18\xc8\x31\xea\xaf\x6e\x95\x35\x5e\x80\x23\x5d\x0a\x1f\x76\x9a\x7c\x4b\x14\xc4\xd1\xf1\xf9\xce\x59\x24\x55\x9b\x47\x9f\x29\x6d\x87\x7a\xa3\xd1\x51\x8a\x84\x8f\xf8\x9c\x6b\xae\x7c\xde\xed\xe3\xf0\x67\xca\x2f\xb3\xe5\xe5\x65\xf6\x26\x57\xfe\x85\x3e\xeb\xd8\x64\xca\xfb\x29\x66\x8a\x14\x57\x00\xbd\xa3\xac\x42\xdf\xc2\x9f\x49\x8c\x9f\x0a\xd5\x53\xe3\xec\x60\x6a\xa9\xac\xb6\x6e\x05\x95\x46\xf5\xf4\xee\x60\xb0\xd7\xbe\xfe\xfa\xdb\x4d\xf5\xf6\xea\xa8\x8f\x05\x91\x9e\x3f\xd3\x0a\x7c\x87\x5a\x9f\xed\x4c\x55\x59\xc1\xb5\x35\xde\x6a\xf4\x8b\x0f\xd6\xa0\xb2\x8b\xf7\x83\xe2\x1a\xf7\x6a\x5a\xbc\xe7\x8a\x1c\x06\xb6\x06\x3e\x58\x63\x17\x37\xf4\x88\x1f\x07\xb8\x47\xe3\x27\xc5\x0f\x1c\x7c\x70\x84\x1d\x7c\x24\x87\x27\x1b\xd7\x76\x70\x4c\x0e\x7e\xa5\x71\x01\x9d\x35\xd6\xf7\xa8\xe8\x88\xc2\x6e\xc9\x6d\xb4\x1d\x57\x80\x43\xb0\x47\xfd\x68\x5d\x2d\x47\x87\xfd\x0a\x8c\x75\x1d\x9e\x00\x1f\x5b\x0e\x24\x93\x9f\x55\xac\xd5\xb4\xf3\xd7\x45\x7a\x64\x91\x6c\x59\x69\xab\x9e\xf6\xe5\xeb\xb1\xae\xd9\x34\x2b\xb8\x84\xe5\x55\xff\x3c\x5b\x9f\x1b\x67\x33\x33\x32\x2a\xfd\x49\xed\x4f\x4a\xc8\xa6\x25\xc7\x61\xf6\x51\xe4\x7b\xd6\x8a\x7c\x1a\xb0\xa2\xb2\xf5\x2e\xd1\x69\x70\x0b\x4a\xa3\xf7\xa5\xd0\xdc\xb4\x41\x56\x7a\x20\x88\x3f\x02\x9c\xd5\x54\x0a\x83\x5b\x6e\x52\x4d\xc5\x44\x7b\x51\xf3\xe1\x8c\xc1\x6d\xca\xbe\x27\x97\xc6\x0a\xd9\x90\x13\xeb\x02\x81\xeb\x52\x68\xdb\x58\x79\x54\xef\x3b\xf3\xb5\x98\x4f\x57\x0e\x4d\x2d\xa3\x95\x38\x0e\x12\xae\xf7\x19\x15\x83\x9e\x0d\x5d\x84\x06\x2d\xd7\x24\xad\x91\x1d\xd5\x32\x1e\xac\xed\x18\x31\xcd\xe6\xf9\xa0\x8f\xc2\xa0\x13\x82\x88\xaf\xb3\x15\x6b\x3a\x04\xf5\xd1\x8b\xc1\xed\xf9\xc9\xfd\x1a\x8f\x28\x6b\x0c\x28\x51\x05\xde\x62\x20\xff\x8f\xce\xaa\x21\x04\x6b\x62\xaf\x6b\xec\x3d\x89\x75\xc1\xf3\xd6\x4b\x9e\xc4\xba\x23\x33\x14\x39\xaf\x0f\x19\x16\x79\xcd\xdb\x44\x42\x6e\x70\x5a\x9c\x54\xd6\x93\x4a\x7d\x6c\xac\xec\xb1\x96\x95\x0d\x22\x65\xc4\xa6\xa6\x67\x59\xa1\x49\x85\xfe\x82\x90\x13\x12\xe6\x8c\x2a\xb7\x8e\xdf\x59\x6c\x97\xb3\x6d\xec\x85\xc8\x1b\x99\x40\x0e\x6a\x74\x4f\x64\xe4\xdb\x03\x15\xf0\xcb\x50\x91\x33\x14\xc8\xc3\xf7\x43\x68\xc9\x04\x56\xa9\x11\x8a\xbc\x5d\x1e\xfc\x9d\x04\x77\x76\xdc\x7b\x3b\x44\x8f\x01\xaf\xce\x03\x5a\x0d\x7e\xf9\x06\x52\xc3\x89\xf5\x43\xcb\x1e\x86\xc0\x9a\xc3\x0e\x46\xd6\x1a\x5a\xd2\x3d\xec\xec\x10\x67\x6d\x0e\x4b\x30\x72\x68\xa3\xd6\x9d\x02\x53\x7a\xf0\x11\x7d\xda\x44\x03\x77\x3d\x99\xdb\x9b\xf8\x42\x30\xa4\x02\xfc\xef\xee\xf6\xe6\xfa\xff\x10\x27\x37\x83\x7b\x6e\x0c\xb0\x81\x60\xa1\xa1\x00\x3e\xa0\x0b\x54\x67\x45\xde\x5e\x1d\xb2\x99\x39\xf9\x6f\xa9\xcd\xcd\x92\x6b\xdb\xb0\x11\x13\x43\xb1\x2d\xb5\x8d\x9c\xa5\xe6\x38\xf6\x4a\x30\x52\xa3\x6b\x08\x46\xdc\x92\x97\xb4\xd9\x44\x88\x93\x90\x6a\x31\xcd\xdd\x3a\xe1\xbc\x35\xa7\xa3\xf0\x02\xd6\x4c\xe8\x79\x17\xa5\x45\xd4\x1e\x6e\x21\xb8\x57\x8e\xfb\xe0\xf7\x17\x91\x4f\x12\x78\xa7\x4e\xee\x07\x5b\x53\xf6\xf8\x69\x20\xb7\x4b\x57\xc3\xb4\x94\x6f\xb2\x65\xb6\x4c\x6f\xfe\x47\x2f\xd6\x45\x3e\x1d\xfd\xc2\xcb\xe3\xcb\x9b\xe2\xdf\x6c\xe3\xe5\x7a\x66\x94\x90\x4f\xaf\xa3\x22\x9f\xfe\x16\x5c\xfc\x1d\x00\x00\xff\xff\xe9\x8b\x39\x12\x28\x08\x00\x00")

func templatesHomeTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesHomeTmpl,
		"templates/home.tmpl",
	)
}

func templatesHomeTmpl() (*asset, error) {
	bytes, err := templatesHomeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/home.tmpl", size: 2088, mode: os.FileMode(420), modTime: time.Unix(1516120105, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/commandline.tmpl": templatesCommandlineTmpl,
	"templates/home.tmpl": templatesHomeTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"commandline.tmpl": &bintree{templatesCommandlineTmpl, map[string]*bintree{}},
		"home.tmpl": &bintree{templatesHomeTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

