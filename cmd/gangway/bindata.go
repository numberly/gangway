// Code generated by "esc -o cmd/gangway/bindata.go templates/"; DO NOT EDIT.

package main

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/templates/commandline.tmpl": {
		local:   "templates/commandline.tmpl",
		size:    4161,
		modtime: 1537501731,
		compressed: `
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
MVw4+xp0dlFq0NkfDP4bAAD//1CTz/VBEAAA
`,
	},

	"/templates/home.tmpl": {
		local:   "templates/home.tmpl",
		size:    2088,
		modtime: 1532555682,
		compressed: `
H4sIAAAAAAAC/4xWUW/jNgx+76/g6V42LLKbuxXYcnaGrd2AYnfrgHYH7JGWGZutLPkkOW5u2H8fJMdJ
mhuwBUgsUhT5kR9ppXh1c3f98OfvP0MbOr2+KOIDNJqmFGREVBDW6wuAoqOA0IbQS/o08LYU19YEMkE+
7HoSoCapFIGeQx7dvAPVovMUyj8efpHfifzoxmBHpdgyjb114eTwyHVoy5q2rEgmYQFsODBq6RVqKpcL
6PCZu6GbFdnl3nXgoGndoGlG3BX5JF7EnVdSwvX9PYCUyVKzeYLW0aYUMSO/yvONNcFnjbWNJuzZZ8p2
OStrfthgx3pXfsBAjlF/c6us8QIc6VL4sNPkW6Igjo7Pd84iqdo8+kxpO9QbjY5SJHzE51xz5fNuH4c/
U36ZLS8vsze58i/0WccmU95PMVOkuALoHWUV+hb+SmL8VKieGmcHU0tltXUrqDSqp3cHg7329bffb6q3
V0d9LIj0/JlW4DvU+mxnqsoKrq3xVqNffLAGlV28HxTXuFfT4j1X5DCwNfDBGru4oUf8OMA9Gj8pfuLg
gyPs4CM5PNm4toNjcvAbjQvorLG+R0VHFHZLbqPtuAIcgj3qR+tqOTrsV2Cs6/AE+NhyIJn8rGKtpp2/
L9Iji2TLSlv1tC9fj3XNplnBJSyv+ufZ+tw4m5mRUelPan9SQjYtOQ6zjyLfs1bk04AVla13iU6DW1Aa
vS+F5qYNstIDQfwR4KymUhjccpNqKibai5oPZwxuU/Y9uTRWyIacWBcIXJdC28bKo3rfma/FfLpyaGoZ
rcRxkHC9z6gY9GzoIjRouSZpjeyolvFgbceIaTbPB30UBp0QRHydrVjTIaiPXgxuz0/u13hEWWNAiSrw
FgP5f3VWDSFYE3tdY+9JrAuet17yJNYdmaHIeX3IsMhr3iYScoPT4qSynlTqY2Nlj7WsbBApIzY1PcsK
TSr0F4SckDBnVLl1/M5iu5xtYy9E3sgEclCjeyIj3x6ogF+HipyhQB5+HEJLJrBKjVDk7fLg7yS4s+Pe
2yF6DHh1HtBq8Ms3kBpOrB9a9jAE1hx2MLLW0JLuYWeHOGtzWIKRQxu17hSY0oOP6NMmGrjrydzexBeC
IRXgq7vbm+uvIU5uBvfcGGADwUJDAXxAF6jOiry9OmQzc/L/UpubJde2YSMmhmJbahs5S81x7JVgpEbX
EIy4JS9ps4kQJyHVYpq7dcJ5a05H4QWsmdDzLkqLqD3cQnCvHPfB7y8inyTwTp3cD7am7PHTQG6XroZp
Kd9ky2yZ3vyPXqyLfDr6hZfHlzfFf9nGy/XMKCGfXkdFPv0tuPgnAAD//yEDNLMoCAAA
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/templates": {
		isDir: true,
		local: "templates",
	},
}
