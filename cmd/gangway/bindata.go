// Code generated by "esc -o cmd/gangway/bindata.go templates/"; DO NOT EDIT.

package main

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/templates/commandline.tmpl": {
		local:   "templates/commandline.tmpl",
		size:    4205,
		modtime: 1537906117,
		compressed: `
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
ZBfOyQadXaoadPbHhf8FAAD//1/nq8ltEAAA
`,
	},

	"/templates/home.tmpl": {
		local:   "templates/home.tmpl",
		size:    2088,
		modtime: 1520372473,
		compressed: `
H4sIAAAAAAAC/4xWUW/jNgx+76/g6V42LLKbuxXYcnaGrd2AYnfrgHYH7JGWGZutLPkkOW5u2H8fJMdJ
mhuwBUgsUhT5kR9ppXh1c3f98OfvP0MbOr2+KOIDNJqmFGREVBDW6wuAoqOA0IbQS/o08LYU19YEMkE+
7HoSoCapFIGeQx7dvAPVovMUyj8efpHfifzoxmBHpdgyjb114eTwyHVoy5q2rEgmYQFsODBq6RVqKpcL
6PCZu6GbFdnl3nXgoGndoGlG3BX5JF7EnVdSwvX9PYCUyVKzeYLW0aYUMSO/yvONNcFnjbWNJuzZZ8p2
OStrfthgx3pXfsBAjlF/c6us8QIc6VL4sNPkW6Igjo7Pd84iqdo8+kxpO9QbjY5SJHzE51xz5fNuH4c/
U36ZLS8vsze58i/0WccmU95PMVOkuALoHWUV+hb+SmL8VKieGmcHU0tltXUrqDSqp3cHg7329bffb6q3
V0d9LIj0/JlW4DvU+mxnqsoKrq3xVqNffLAGlV28HxTXuFfT4j1X5DCwNfDBGru4oUf8OMA9Gj8pfuLg
gyPs4CM5PNm4toNjcvAbjQvorLG+R0VHFHZLbqPtuAIcgj3qR+tqOTrsV2Cs6/AE+NhyIJn8rGKtpp2/
L9Iji2TLSlv1tC9fj3XNplnBJSyv+ufZ+tw4m5mRUelPan9SQjYtOQ6zjyLfs1bk04AVla13iU6DW1Aa
vS+F5qYNstIDQfwR4KymUhjccpNqKibai5oPZwxuU/Y9uTRWyIacWBcIXJdC28bKo3rfma/FfLpyaGoZ
rcRxkHC9z6gY9GzoIjRouSZpjeyolvFgbceIaTbPB30UBp0QRHydrVjTIaiPXgxuz0/u13hEWWNAiSrw
FgP5f3VWDSFYE3tdY+9JrAuet17yJNYdmaHIeX3IsMhr3iYScoPT4qSynlTqY2Nlj7WsbBApIzY1PcsK
TSr0F4SckDBnVLl1/M5iu5xtYy9E3sgEclCjeyIj3x6ogF+HipyhQB5+HEJLJrBKjVDk7fLg7yS4s+Pe
2yF6DHh1HtBq8Ms3kBpOrB9a9jAE1hx2MLLW0JLuYWeHOGtzWIKRQxu17hSY0oOP6NMmGrjrydzexBeC
IRXgq7vbm+uvIU5uBvfcGGADwUJDAXxAF6jOiry9OmQzc/L/UpubJde2YSMmhmJbahs5S81x7JVgpEbX
EIy4JS9ps4kQJyHVYpq7dcJ5a05H4QWsmdDzLkqLqD3cQnCvHPfB7y8inyTwTp3cD7am7PHTQG6XroZp
Kd9ky2yZ3vyPXqyLfDr6hZfHlzfFf9nGy/XMKCGfXkdFPv0tuPgnAAD//yEDNLMoCAAA
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/templates": {
		isDir: true,
		local: "templates",
	},
}
