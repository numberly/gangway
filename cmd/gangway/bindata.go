// Code generated by go-bindata.
// sources:
// templates/commandline.tmpl
// templates/home.tmpl
// templates/kubeconfig.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesCommandlineTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x6d\x57\xdb\xb8\x12\xfe\xce\xaf\x98\xf5\xf6\x9c\x6d\x0f\x55\x14\x28\x50\xda\x1b\xe7\x9e\x34\x94\x36\x2d\x34\x94\x84\x52\x38\xfb\x61\x65\x79\x62\x8b\xc8\x92\x91\xe4\xbc\xd0\xcb\x7f\xbf\x47\x76\x12\x20\xa4\xc0\xbd\xdb\xfd\x92\x30\x23\xcf\x3c\xf3\xcc\x8b\x47\xa1\xf1\xdb\x5e\xb7\xdd\x3f\x3b\x7a\x0f\xa9\xcb\x64\x73\xad\xe1\xbf\x40\x32\x95\x84\x01\xaa\xc0\x2b\x90\xc5\xcd\x35\x80\x46\x86\x8e\x41\xea\x5c\x4e\xf0\xb2\x10\xa3\x30\x68\x6b\xe5\x50\x39\xd2\x9f\xe6\x18\x00\xaf\xa4\x30\x70\x38\x71\xd4\xbb\xf9\x17\xf0\x94\x19\x8b\x2e\x3c\xe9\xef\x93\xdd\x80\xde\xb8\x51\x2c\xc3\x30\x18\x09\x1c\xe7\xda\xb8\x5b\xc6\x63\x11\xbb\x34\x8c\x71\x24\x38\x92\x52\x78\x09\x42\x09\x27\x98\x24\x96\x33\x89\xe1\xc6\x4b\xc8\xd8\x44\x64\x45\x36\x57\xd4\xea\x33\xd7\x4e\x38\x89\xcd\x0f\x4c\x25\x63\x36\x6d\xd0\x4a\x5c\xf3\x27\xbf\x11\x02\xed\x5e\x0f\x80\x90\xf2\x49\x29\xd4\x10\x52\x83\x83\x30\xf0\x8c\xec\x5b\x4a\x07\x5a\x39\x5b\x4b\xb4\x4e\x24\xb2\x5c\xd8\x1a\xd7\x19\x15\x5c\xab\x7f\x0f\x58\x26\xe4\x34\x3c\x64\x0e\x8d\x60\x72\xbd\xc3\xb5\xb2\x01\x18\x94\x61\x60\xdd\x54\xa2\x4d\x11\x5d\x70\xe3\x78\xf9\x64\x09\x89\xc7\xea\xc2\xd6\xb8\xd4\x45\x3c\x90\xcc\x60\x89\xc4\x2e\xd8\x84\x4a\x11\x59\x9a\xcd\x70\xc4\x15\xd2\x7a\x6d\xa3\x5e\xaf\x6d\x52\x6e\xef\xe8\x6b\x99\x50\x35\x6e\x6d\x30\x63\x07\x84\xc0\x91\x11\x36\x9b\xf3\xb3\xdc\x88\xdc\x81\x35\xfc\xc9\xb0\xb9\xb7\xa7\x1b\xb5\x8d\xad\x5a\xbd\x12\x4a\x94\x0b\x1b\x80\x50\x0e\x13\x23\xdc\x34\x0c\x6c\xca\x36\xb7\x77\xc8\x45\xff\xc3\xd5\x41\xeb\xb2\xdb\xe2\xdd\x83\xf5\xd6\xc1\xde\xe6\x60\xd3\x8d\xf6\xcf\x5e\x0f\xec\x4e\x3c\x1e\x76\x51\xef\xee\x4e\x44\xf1\xed\x23\x3b\x1e\x86\x01\x70\xa3\xad\xd5\x46\x24\x42\x85\x01\x53\x5a\x4d\x33\x5d\xd8\xa0\xd9\xa0\x55\x9c\xbf\x24\x64\xae\xb3\x5c\x2b\x54\x6e\xa6\x27\x11\xb3\xe9\x03\x14\xda\xe9\xb6\x19\x6d\xbb\xa4\x15\x7f\x3b\x6c\xa7\xaf\x4f\x2f\xa3\xfa\x49\x97\x7f\x1f\x7e\x6d\x7d\xfc\xb2\xdf\xc3\x2b\xb1\x5e\x1f\xd1\xfa\xd5\xce\x64\x30\x7e\x2a\x85\x5f\x50\xfc\x3b\x94\x5c\x8a\x19\xce\xe9\x38\x9d\x69\x63\xf4\x78\x51\xfb\x15\x9c\xb6\x7a\x6f\x8a\xc1\xb1\xd9\x78\x7f\xc9\x4e\xf6\xf7\xf1\xf0\x0d\xdd\xde\xfc\xf0\x71\x67\xf7\xa3\xdd\xe8\x45\xa3\xc9\x2e\xee\x7f\x7f\x77\x9a\xcb\xdd\xab\xa3\xce\xcf\x39\x01\xfd\x47\xc8\xe4\xb2\x48\x84\xb2\xd4\x69\x2d\x23\x66\x16\xac\x4a\xe9\x21\x52\x93\xb3\xd7\xb4\x77\xc2\x5e\xef\xbc\x31\xf5\xa3\xf3\x8d\xa9\x3b\x3f\xda\xbf\xd8\x3c\xbd\x54\xdd\xf3\x33\x76\xd6\xfb\x1c\x7d\xdf\x48\xbf\xf5\xc5\x57\xc9\x5b\x8f\x92\xfa\xdb\x73\xf1\x28\x89\xd5\xcd\xd6\x1d\x7d\x3e\xfb\x74\xc0\xcf\x8e\x8f\x5e\x9d\x77\x8e\x84\xec\xd7\x5f\x99\xa9\x9a\x9e\x0f\x86\xf1\x87\xfd\xf1\x55\x7b\x7c\xb2\xbb\xf9\xe5\xdd\x16\x6d\xf5\xb7\x9e\xd2\x6c\x00\xff\x27\x19\x2e\x45\x1e\x69\x66\xe2\xda\x85\xa5\x9b\xb5\xba\x9f\x9b\x85\x6a\x16\xfe\xaf\x1d\xcb\x79\xc6\xb8\xce\xa7\xc4\x69\xb2\x80\x9b\xe5\xee\x9e\xfe\x81\x2c\xda\xf5\xf3\x0d\xfb\xee\xe4\xeb\x3e\x63\xe3\xd7\x13\x6c\xa9\xd3\x88\xea\xde\x6e\xf2\xee\x70\xeb\xf0\xfd\x67\xf1\xfe\xf4\xf0\xf8\x53\x3d\x5f\xa7\x93\x88\x3f\x69\x64\x1b\x74\xbe\xdc\x00\x1a\x91\x8e\xa7\xd5\x9f\xe5\x47\xa9\x53\x6c\x04\x5c\x32\x6b\xc3\x40\x8a\x24\x75\x24\x92\x05\x82\xff\x08\xc0\x68\x89\x61\xa0\xd8\x48\x24\xcc\x09\xad\x82\xe6\xc2\xae\xb4\x8d\xc5\xc2\x56\xb1\x11\x19\x1b\x96\xe7\x68\xca\x4d\xc7\x84\x42\x13\x34\x1b\x0c\x44\x1c\x06\x52\x27\x9a\xdc\xa8\x67\x23\xf6\x7b\x30\xb7\x8e\x0c\x53\x31\xf1\x4f\x05\xcd\x64\xbe\xdb\xd8\x12\x5a\x21\xe7\x8f\x1b\x1f\x28\xa4\x22\x46\xa2\x15\xc9\x30\x26\xde\x3c\xd6\xe3\xe5\x08\x4b\x3b\x29\x7c\x18\x15\x24\xf5\x18\x85\x0b\x9a\x07\xe5\xb7\x07\x69\x50\x29\x96\x90\x68\x21\xcb\xad\x73\x17\xdc\x13\xf1\x34\x33\x1d\x09\x89\x8b\xd8\xad\x0f\x43\xb1\xd1\x63\xd0\xbf\x07\xcd\x3d\xe4\x3a\x46\xf8\x74\xda\x7f\x08\xf8\x8e\xe6\xc6\x1a\x62\xe6\x18\x61\xdc\x89\x11\x73\x68\x57\xc6\x12\x15\xce\x69\x45\xb8\x96\x92\xe5\x16\x83\x66\x43\xcc\x8f\xe6\xab\x95\x88\x72\xb5\x37\x33\x54\x45\x83\x8a\xe6\xfd\x3c\xd3\x58\x8c\x6e\x54\x0d\xaa\xd8\x2d\x71\x6d\x55\xf1\x6f\x15\xfc\xae\xab\x74\x6b\xfe\x88\xef\x42\xdf\x1a\xa8\x1c\x1a\x88\x99\x19\xa2\x22\xaf\x56\xe4\xec\x14\x25\xd7\x19\xc2\x8f\x1f\x50\x3b\xb1\x68\xfc\x35\x0a\xae\xaf\x6b\x4b\x31\xa6\x5b\xcb\x50\xdb\xf7\x7d\x75\x14\x68\xe3\x61\x9d\x86\x04\x1d\x70\x9d\x65\x65\xa3\x09\x85\xc0\x38\x47\x6b\xfd\x91\x4b\x2b\xb8\xb6\x2c\xac\x43\xf3\xa5\x42\x84\xcf\x45\x84\x46\xa1\x43\x0b\xbc\x3a\x79\x09\x53\x5d\xc0\x58\x48\x09\x0a\x31\xf6\xb6\x5c\xab\x81\x48\x0a\x83\xd0\xcd\x51\x75\xf6\xa0\xad\x95\x42\xee\xe0\x79\xb7\xb3\xd7\x7e\x01\xac\x70\x29\x2a\xc1\xcb\xf9\x81\x81\x36\xde\x85\x01\x2e\x05\x2a\x77\x8f\xd4\x76\x73\x99\xc2\xdd\x27\x22\xb3\xc4\x3a\xbf\x4f\xba\x9f\xe2\x9d\xd0\x6f\x73\x2e\x9c\x90\xc2\x4d\x5f\xc2\xb0\x88\x90\x3b\xe9\xef\x99\x53\x88\x10\x84\xb2\x8e\x49\x89\x31\x48\x31\x44\xb0\xfa\xed\x52\x68\x0b\xa0\x3b\x73\xd1\xc8\x0d\x2e\x45\xd0\x28\x5b\x7c\xfe\x46\x61\x2a\x29\x58\x82\xe5\x45\x25\x68\xae\x3d\x03\x5e\x18\x09\xe4\xa0\x0b\xf3\x17\xad\x75\xda\xb0\x04\x97\x6f\xa5\xc3\x05\x03\x62\x50\x22\xb3\x48\xe7\xdf\x7f\x55\x3e\xec\xdf\x70\x61\x1d\x8b\x24\xd6\xdc\xc4\xfd\x45\x23\xa1\xe8\xb3\xe7\x45\xd9\x67\xff\x01\x36\x1e\xc2\x1f\x3f\x72\x23\x94\x03\xa7\xa5\x1e\xa3\x79\xfe\xac\xfe\xe2\xfa\x8f\x17\x94\x65\xf1\xce\x16\x9d\x65\xce\x53\x49\x33\x1d\xc3\xfa\x04\x6a\xb7\x94\xb6\x88\x35\x64\xa3\x1b\x1d\xd0\xc2\x1a\x2a\x35\x67\xb2\x84\x9a\xab\x61\x29\x6d\xd4\xe7\xed\x4e\x2e\x1b\xf4\x5e\x76\x57\xd5\xbb\xab\x38\xce\xeb\x09\xc2\xde\x94\xb2\xea\x56\x5f\x60\x9c\x20\x2f\x1c\x96\x8d\x3e\xd0\x52\xea\xb1\x50\xc9\xdb\x06\x8d\x96\x27\x3f\x5f\x86\xbb\x57\xde\x47\x0a\x8c\x3c\xd5\x10\xdc\x1a\xa6\x76\x0b\xae\xaf\x03\xf8\x13\x9a\xc0\x19\xb9\x3f\x65\xb5\x1c\xb3\xb5\x79\xf4\xd5\x30\x81\x45\x47\x66\x13\xb7\x6a\x2e\x09\xb1\x68\x46\x68\x42\x7f\xd6\x3a\xea\xf4\x4a\xe9\xe4\xf8\xa0\x3a\xe4\x68\x9c\x18\xf8\x89\x43\xe2\xa7\x4f\x97\xfb\xf5\x7f\x03\x37\x18\xa3\xf2\x3f\xc8\x6c\x19\xc0\xfb\x8c\x09\xe9\xbd\xc3\x9f\x65\x36\x48\xe9\x98\xe4\x46\x8f\x44\x8c\x26\xd4\x22\xe6\x3f\x39\x23\xcc\x24\xa1\x88\x73\x22\xac\x2d\xd0\x90\xc2\xc8\x32\xee\x4e\x29\xce\x82\x7e\xc0\xb4\x7a\x51\x10\x11\x87\x55\xf8\x5e\xea\xec\x3d\xcd\xc8\x22\x37\xe8\x6e\x19\xf6\x4a\x85\x37\xfe\xb9\xad\xc1\x81\x41\x9b\x12\xa7\x87\xa8\x4a\xdb\xe3\x4a\xd3\xf7\x8a\x87\x6d\x45\x7c\xcb\xac\xb3\x37\xb7\x58\x99\x62\xff\x6b\x78\xe2\x56\xd7\x77\x56\xfc\x70\xe5\x61\x61\x67\x27\xf3\xaa\x2c\xbb\x2f\x2c\x3e\xe0\x7e\xa9\x9d\x57\xcc\xdd\xca\xc1\xbb\xb5\xed\x8c\x1e\x43\x79\x03\x59\xb5\xf1\x17\x17\x8d\x32\x28\xad\x06\x37\xbb\xd9\x29\x22\x99\x49\x10\xc6\x6c\x84\x96\xe0\x60\xe0\xf7\x44\x25\x94\x57\xaf\xea\xd6\xd5\xdc\xd3\x63\x25\x35\x8b\xcb\xb7\x78\xc5\xe9\xf1\x25\xbd\x10\x1b\xb4\xba\xe5\x35\x68\xf5\xdf\x8e\xff\x06\x00\x00\xff\xff\xdc\x32\x3b\xad\xfe\x10\x00\x00")

func templatesCommandlineTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesCommandlineTmpl,
		"templates/commandline.tmpl",
	)
}

func templatesCommandlineTmpl() (*asset, error) {
	bytes, err := templatesCommandlineTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/commandline.tmpl", size: 4350, mode: os.FileMode(420), modTime: time.Unix(1528914510, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHomeTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x56\x51\x6f\xe3\x36\x0c\x7e\xef\xaf\xe0\xe9\x5e\x36\x2c\xb2\x9b\xbb\x15\xd8\x72\x76\x86\xad\xdd\x80\x62\x77\xeb\x80\x76\x07\xec\x91\x96\x19\x9b\xad\x2c\xf9\x24\x39\x6e\x6e\xd8\x7f\x1f\x24\xc7\x49\x9a\x1b\xb0\x05\x48\x2c\x52\x14\xf9\x91\x1f\x69\xa5\x78\x75\x73\x77\xfd\xf0\xe7\xef\x3f\x43\x1b\x3a\xbd\xbe\x28\xe2\x03\x34\x9a\xa6\x14\x64\x44\x54\x10\xd6\xeb\x0b\x80\xa2\xa3\x80\xd0\x86\xd0\x4b\xfa\x34\xf0\xb6\x14\xd7\xd6\x04\x32\x41\x3e\xec\x7a\x12\xa0\x26\xa9\x14\x81\x9e\x43\x1e\xdd\xbc\x03\xd5\xa2\xf3\x14\xca\x3f\x1e\x7e\x91\xdf\x89\xfc\xe8\xc6\x60\x47\xa5\xd8\x32\x8d\xbd\x75\xe1\xe4\xf0\xc8\x75\x68\xcb\x9a\xb6\xac\x48\x26\x61\x01\x6c\x38\x30\x6a\xe9\x15\x6a\x2a\x97\x0b\xe8\xf0\x99\xbb\xa1\x9b\x15\xd9\xe5\xde\x75\xe0\xa0\x69\xdd\xa0\x69\x46\xdc\x15\xf9\x24\x5e\xc4\x9d\x57\x52\xc2\xf5\xfd\x3d\x80\x94\xc9\x52\xb3\x79\x82\xd6\xd1\xa6\x14\x31\x23\xbf\xca\xf3\x8d\x35\xc1\x67\x8d\xb5\x8d\x26\xec\xd9\x67\xca\x76\x39\x2b\x6b\x7e\xd8\x60\xc7\x7a\x57\x7e\xc0\x40\x8e\x51\x7f\x73\xab\xac\xf1\x02\x1c\xe9\x52\xf8\xb0\xd3\xe4\x5b\xa2\x20\x8e\x8e\xcf\x77\xce\x22\xa9\xda\x3c\xfa\x4c\x69\x3b\xd4\x1b\x8d\x8e\x52\x24\x7c\xc4\xe7\x5c\x73\xe5\xf3\x6e\x1f\x87\x3f\x53\x7e\x99\x2d\x2f\x2f\xb3\x37\xb9\xf2\x2f\xf4\x59\xc7\x26\x53\xde\x4f\x31\x53\xa4\xb8\x02\xe8\x1d\x65\x15\xfa\x16\xfe\x4a\x62\xfc\x54\xa8\x9e\x1a\x67\x07\x53\x4b\x65\xb5\x75\x2b\xa8\x34\xaa\xa7\x77\x07\x83\xbd\xf6\xf5\xb7\xdf\x6f\xaa\xb7\x57\x47\x7d\x2c\x88\xf4\xfc\x99\x56\xe0\x3b\xd4\xfa\x6c\x67\xaa\xca\x0a\xae\xad\xf1\x56\xa3\x5f\x7c\xb0\x06\x95\x5d\xbc\x1f\x14\xd7\xb8\x57\xd3\xe2\x3d\x57\xe4\x30\xb0\x35\xf0\xc1\x1a\xbb\xb8\xa1\x47\xfc\x38\xc0\x3d\x1a\x3f\x29\x7e\xe2\xe0\x83\x23\xec\xe0\x23\x39\x3c\xd9\xb8\xb6\x83\x63\x72\xf0\x1b\x8d\x0b\xe8\xac\xb1\xbe\x47\x45\x47\x14\x76\x4b\x6e\xa3\xed\xb8\x02\x1c\x82\x3d\xea\x47\xeb\x6a\x39\x3a\xec\x57\x60\xac\xeb\xf0\x04\xf8\xd8\x72\x20\x99\xfc\xac\x62\xad\xa6\x9d\xbf\x2f\xd2\x23\x8b\x64\xcb\x4a\x5b\xf5\xb4\x2f\x5f\x8f\x75\xcd\xa6\x59\xc1\x25\x2c\xaf\xfa\xe7\xd9\xfa\xdc\x38\x9b\x99\x91\x51\xe9\x4f\x6a\x7f\x52\x42\x36\x2d\x39\x0e\xb3\x8f\x22\xdf\xb3\x56\xe4\xd3\x80\x15\x95\xad\x77\x89\x4e\x83\x5b\x50\x1a\xbd\x2f\x85\xe6\xa6\x0d\xb2\xd2\x03\x41\xfc\x11\xe0\xac\xa6\x52\x18\xdc\x72\x93\x6a\x2a\x26\xda\x8b\x9a\x0f\x67\x0c\x6e\x53\xf6\x3d\xb9\x34\x56\xc8\x86\x9c\x58\x17\x08\x5c\x97\x42\xdb\xc6\xca\xa3\x7a\xdf\x99\xaf\xc5\x7c\xba\x72\x68\x6a\x19\xad\xc4\x71\x90\x70\xbd\xcf\xa8\x18\xf4\x6c\xe8\x22\x34\x68\xb9\x26\x69\x8d\xec\xa8\x96\xf1\x60\x6d\xc7\x88\x69\x36\xcf\x07\x7d\x14\x06\x9d\x10\x44\x7c\x9d\xad\x58\xd3\x21\xa8\x8f\x5e\x0c\x6e\xcf\x4f\xee\xd7\x78\x44\x59\x63\x40\x89\x2a\xf0\x16\x03\xf9\x7f\x75\x56\x0d\x21\x58\x13\x7b\x5d\x63\xef\x49\xac\x0b\x9e\xb7\x5e\xf2\x24\xd6\x1d\x99\xa1\xc8\x79\x7d\xc8\xb0\xc8\x6b\xde\x26\x12\x72\x83\xd3\xe2\xa4\xb2\x9e\x54\xea\x63\x63\x65\x8f\xb5\xac\x6c\x10\x29\x23\x36\x35\x3d\xcb\x0a\x4d\x2a\xf4\x17\x84\x9c\x90\x30\x67\x54\xb9\x75\xfc\xce\x62\xbb\x9c\x6d\x63\x2f\x44\xde\xc8\x04\x72\x50\xa3\x7b\x22\x23\xdf\x1e\xa8\x80\x5f\x87\x8a\x9c\xa1\x40\x1e\x7e\x1c\x42\x4b\x26\xb0\x4a\x8d\x50\xe4\xed\xf2\xe0\xef\x24\xb8\xb3\xe3\xde\xdb\x21\x7a\x0c\x78\x75\x1e\xd0\x6a\xf0\xcb\x37\x90\x1a\x4e\xac\x1f\x5a\xf6\x30\x04\xd6\x1c\x76\x30\xb2\xd6\xd0\x92\xee\x61\x67\x87\x38\x6b\x73\x58\x82\x91\x43\x1b\xb5\xee\x14\x98\xd2\x83\x8f\xe8\xd3\x26\x1a\xb8\xeb\xc9\xdc\xde\xc4\x17\x82\x21\x15\xe0\xab\xbb\xdb\x9b\xeb\xaf\x21\x4e\x6e\x06\xf7\xdc\x18\x60\x03\xc1\x42\x43\x01\x7c\x40\x17\xa8\xce\x8a\xbc\xbd\x3a\x64\x33\x73\xf2\xff\x52\x9b\x9b\x25\xd7\xb6\x61\x23\x26\x86\x62\x5b\x6a\x1b\x39\x4b\xcd\x71\xec\x95\x60\xa4\x46\xd7\x10\x8c\xb8\x25\x2f\x69\xb3\x89\x10\x27\x21\xd5\x62\x9a\xbb\x75\xc2\x79\x6b\x4e\x47\xe1\x05\xac\x99\xd0\xf3\x2e\x4a\x8b\xa8\x3d\xdc\x42\x70\xaf\x1c\xf7\xc1\xef\x2f\x22\x9f\x24\xf0\x4e\x9d\xdc\x0f\xb6\xa6\xec\xf1\xd3\x40\x6e\x97\xae\x86\x69\x29\xdf\x64\xcb\x6c\x99\xde\xfc\x8f\x5e\xac\x8b\x7c\x3a\xfa\x85\x97\xc7\x97\x37\xc5\x7f\xd9\xc6\xcb\xf5\xcc\x28\x21\x9f\x5e\x47\x45\x3e\xfd\x2d\xb8\xf8\x27\x00\x00\xff\xff\x21\x03\x34\xb3\x28\x08\x00\x00")

func templatesHomeTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesHomeTmpl,
		"templates/home.tmpl",
	)
}

func templatesHomeTmpl() (*asset, error) {
	bytes, err := templatesHomeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/home.tmpl", size: 2088, mode: os.FileMode(420), modTime: time.Unix(1524578480, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesKubeconfigTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\x41\x4b\x03\x31\x10\x85\xef\xf9\x15\x43\xef\x11\xbc\x06\x11\x4a\xab\x58\x10\x2d\x6d\xf5\x1e\xb2\xb3\xed\xd0\x6d\xb2\x4c\x92\xa2\x94\xfd\xef\x92\x64\xa3\xab\xd4\x5b\xde\x9b\x6f\xf3\xde\x64\x75\x4f\xef\xc8\x9e\x9c\x55\x70\xbe\x15\xa6\x8b\x3e\x20\x7b\x25\x24\x8c\x67\x25\x00\x00\x0c\x72\xa0\x96\x8c\x0e\x28\x75\x0c\x07\xc7\x14\x3e\x15\xdc\xad\xe7\xbb\x27\xd8\xbd\xc2\x62\x0e\x8f\xd4\xe1\x7d\x86\x3d\xf2\x19\x59\xc1\xec\x72\x81\x9b\xf9\x7a\xb5\xcd\xfa\x6d\xf3\x0c\xc3\x30\x13\x00\x56\x9f\x50\x41\x1a\x2e\x4a\xc6\x8b\x3e\x21\x0c\x83\x30\xce\x06\xfc\x08\x25\xbe\x9c\xc7\xf8\xb1\xcb\xb5\x8f\xd2\x3c\xfa\x3a\x7c\x38\x69\xea\x8a\xfd\x7f\x4c\x64\x46\x1b\x64\x8d\xb8\xc6\x1c\xc9\x36\x0a\x16\xce\xb6\xb4\x17\x3d\x63\x8b\x8c\xd6\xa0\x57\x70\x19\x44\x8a\xcb\x25\x7f\x22\x26\xb9\xb9\x4c\xae\x95\x5e\x4a\xf6\xec\xce\xd4\x54\x0b\xd2\x62\x2d\xed\xab\x4a\xbb\x51\x2a\x43\x4d\xed\x91\xe4\x6a\x59\x57\x9b\x20\x1e\x0d\x63\x98\x62\xdb\xec\x4c\x51\x6a\x64\x70\x47\xb4\x85\x5a\x2d\x77\x49\xfc\x06\x7a\x49\xde\x47\x64\x19\xb9\x1b\xb1\xac\xcb\x0f\xfa\x06\x19\x5b\x46\x7f\x98\x5e\xb7\x29\xd6\x9f\x3b\xcb\x23\x38\x6a\xcc\x57\x00\x00\x00\xff\xff\x05\xb6\x52\x39\x4e\x02\x00\x00")

func templatesKubeconfigTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesKubeconfigTmpl,
		"templates/kubeconfig.tmpl",
	)
}

func templatesKubeconfigTmpl() (*asset, error) {
	bytes, err := templatesKubeconfigTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/kubeconfig.tmpl", size: 590, mode: os.FileMode(420), modTime: time.Unix(1528907947, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/commandline.tmpl": templatesCommandlineTmpl,
	"templates/home.tmpl": templatesHomeTmpl,
	"templates/kubeconfig.tmpl": templatesKubeconfigTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"commandline.tmpl": &bintree{templatesCommandlineTmpl, map[string]*bintree{}},
		"home.tmpl": &bintree{templatesHomeTmpl, map[string]*bintree{}},
		"kubeconfig.tmpl": &bintree{templatesKubeconfigTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

