{"config":{"lang":["en","fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Gangway documentation","text":""},{"location":"#gangway","title":"gangway","text":"<p>(noun): An opening in the bulwark of the ship to allow passengers to board or leave the ship.</p> <p>An application that can be used to easily enable authentication flows via OIDC for a kubernetes cluster. Kubernetes supports OpenID Connect Tokens as a way to identify users who access the cluster. Gangway has been improved and is now able to handle multiple clusters Gangway allows users to self-configure their <code>kubectl</code> configuration in a few short steps.</p> <p></p> <p>Once authenticated for one of your cluster : </p> <p></p>"},{"location":"getting-started/api-flags/","title":"Api flags","text":""},{"location":"getting-started/api-flags/#api-server-flags","title":"API-Server flags","text":"<p>gangway requires that the Kubernetes API server is configured for OIDC:</p> <p>https://kubernetes.io/docs/admin/authentication/#configuring-the-api-server</p> <pre><code>kube-apiserver\n...\n--oidc-issuer-url=\"https://example.auth0.com/\"\n--oidc-client-id=3YM4ue8MoXgBkvCIHh00000000000\n--oidc-username-claim=email\n--oidc-groups-claim=groups\n</code></pre>"},{"location":"getting-started/build/","title":"Build","text":""},{"location":"getting-started/build/#build","title":"Build","text":"<p>Requirements for building</p> <ul> <li>Go (built with version &gt;= 1.21)</li> </ul> <p>A Makefile is provided for building tasks. The options are as follows</p> <p>Getting started is as simple as:</p> <pre><code>go get -u github.com/soulkyu/gangway\ncd $GOPATH/src/github.com/soulkyu/gangway\nmake setup\nmake\n</code></pre>"},{"location":"getting-started/configuration/","title":"Gangway Configuration","text":"<p>Gangway reads a configuration file at startup. The path to the configuration file should be defined using the <code>--config</code> flag.</p> <p>The configuration file should be in YAML format and contain a dictionary (alias hash or map) of key/value pairs. The available options are described below.</p>"},{"location":"getting-started/configuration/#configuration-options","title":"Configuration Options","text":"<p>The following options can be set via the YAML configuration file.</p>"},{"location":"getting-started/configuration/#general-configuration","title":"General Configuration","text":"Key Description <code>host</code> The address to listen on. Defaults to <code>0.0.0.0</code> (all interfaces). <code>port</code> The port to listen on. Defaults to <code>8080</code>. <code>serveTLS</code> Should Gangway use TLS instead of plain HTTP? Defaults to <code>false</code>. <code>certFile</code> The public certificate file to use when using TLS. Defaults to <code>/etc/gangway/tls/tls.crt</code>. <code>keyFile</code> The private key file when using TLS. Defaults to <code>/etc/gangway/tls/tls.key</code>. <code>trustedCAPath</code> Path to a root CA to trust for self-signed certificates at Oauth2 URLs. <code>httpPath</code> The path used by gangway to create URLs. Defaults to <code>\"\"</code>, removing any trailing slashes. <code>sessionSecurityKey</code> The session security key. <code>sessionSalt</code> The session salt. Hardcoded default value <code>MkmfuPNHnZBBivy0L0aW</code>. <code>customHTMLTemplatesDir</code> Path to a directory containing custom HTML templates. <code>customAssetsDir</code> Path to a directory containing assets."},{"location":"getting-started/configuration/#multi-cluster-configuration","title":"Multi-Cluster Configuration","text":"<p>Multi-cluster configuration allows for specific configurations for each cluster within a single file.</p>"},{"location":"getting-started/configuration/#production-cluster","title":"Production Cluster","text":"<ul> <li>EnvPrefix: <code>kube01</code></li> <li>apiServerURL: <code>https://kube01-api-url:443</code></li> <li>audience: <code>xxxxxxxxxxx-xxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com</code></li> <li>providerURL: <code>https://accounts.google.com</code></li> <li>clientID: <code>xxxxxxxxxxx-xxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com</code></li> <li>clientSecret: <code>GXXXX-XXXXXXXXXXXXXXXXXXX</code></li> <li>clusterName: <code>kube01</code></li> <li>emailClaim: <code>email</code></li> <li>redirectURL: <code>https://gangway.local/callback</code></li> <li>scopes: <code>[\"openid\", \"profile\", \"email\"]</code></li> <li>tokenURL: <code>https://www.googleapis.com/oauth2/v4/token</code></li> <li>usernameClaim: <code>email</code></li> </ul>"},{"location":"getting-started/configuration/#development-clusters","title":"Development Clusters","text":"<ul> <li>Cluster 1 (kube02)</li> <li>EnvPrefix: <code>kube02</code></li> <li>apiServerURL: <code>https://kube02-api-url:443</code></li> <li> <p>... (same as Production)</p> </li> <li> <p>Cluster 2 (kube03)</p> </li> <li>EnvPrefix: <code>kube03</code></li> <li>apiServerURL: <code>https://kube03-api-url:443</code></li> <li>clusterCAPath: <code>/etc/gangly/pki/kube03/ca.crt</code></li> <li>... (same as Production)</li> </ul>"},{"location":"getting-started/configuration/#cluster-specific-configuration","title":"Cluster-Specific Configuration","text":"<p>Each cluster can have the following configurations:</p> Key Description <code>clusterName</code> The name of the cluster. Used in the UI and the kubectl config instructions. <code>providerURL</code> OAuth2 provider URL. Must offer an endpoint <code>$providerURL/.well-known/openid-configuration</code> for discovery. <code>clientID</code> API client ID as provided by the identity provider. <code>clientSecret</code> API client secret as provided by the identity provider. <code>allowEmptyClientSecret</code> Some identity providers accept an empty client secret, which is usually not a good idea. If you need to use an empty secret and accept the associated risks, then you can set this to <code>true</code>. Defaults to <code>false</code>. <code>audience</code> The endpoint that provides user profile information [optional]. Not required by all providers. <code>scopes</code> Used to specify the scope of the OAuth authorization request. Defaults to <code>[\"openid\", \"profile\", \"email\", \"offline_access\"]</code>. <code>redirectURL</code> Where to redirect after authentication. This should be a URL where Gangway is reachable. Typically, this must also be registered in the OAuth application with the OAuth provider. <code>usernameClaim</code> The JWT claim to use as the username. This is used in the UI. Combined with the clusterName for the \"user\" part of kubeconfig. Defaults to <code>nickname</code>. <code>emailClaim</code> The JWT claim to use as the email. Defaults to <code>email</code>. <code>apiServerURL</code> The API server endpoint used for configuring kubectl. <code>clusterCAPath</code> Path to find the CA bundle for the API server. Used for configuring kubectl. This path is typically mounted in the default location for workloads running on a Kubernetes cluster and usually doesn't need to be defined. Defaults to <code>/var/run/secrets/kubernetes.io/serviceaccount/ca.crt</code>. <code>showClaims</code> Display received claims. Defaults to <code>true</code>."},{"location":"getting-started/configuration/#additional-functions","title":"Additional Functions","text":"<ul> <li><code>NewMultiClusterConfig</code>: Creates a new multi-cluster configuration instance from a serialized configuration file.</li> <li><code>Validate</code>: Verifies all properties of the configuration structure to ensure they are initialized.</li> <li><code>GetRootPathPrefix</code>: Returns '/' if no prefix is specified, otherwise returns the configured path.</li> <li><code>loadCerts</code>: Loads certificates for cluster configurations from specified paths.</li> </ul>"},{"location":"getting-started/configuration/#use-of-environment-variables","title":"Use of Environment Variables","text":"<p>Environment variables can be used to override configurations specified in the YAML file by using the prefix <code>GANGWAY</code> followed by the corresponding key name in uppercase and underscores for spaces.</p> <p>Example: To override <code>clientSecret</code> for the <code>kube01</code> cluster, use the environment variable <code>KUBE01_GANGWAY_CLIENT_SECRET</code>.</p>"},{"location":"getting-started/deployment/","title":"Deploying Gangway","text":"<p>Deploying Gangway consists of writing a config file and then deploying the service. The service is stateless so it is relatively easy to manage on Kubernetes. How you provide access to the service is going to be dependent on your specific configuration.</p> <p>Gangway is now aware of a multi-cluster configuration, we have developped a helm chart that will made deployment easily.</p> <p>Here is a configration example : </p> <pre><code>host: 0.0.0.0\nport: 8080\nserveTLS: false\nclusters:\n  Production:\n  - EnvPrefix: kube01\n    apiServerURL: https://kube01-api-url:443\n    audience: xxxxxxxxxxx-xxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com\n    providerURL: https://accounts.google.com\n    clientID: xxxxxxxxxxx-xxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com\n    clientSecret: GXXXX-XXXXXXXXXXXXXXXXXXX\n    clusterName: kube01\n    emailClaim: email\n    redirectURL: https://gangway.local/callback\n    scopes:\n    - openid\n    - profile\n    - email\n    tokenURL: https://www.googleapis.com/oauth2/v4/token\n    usernameClaim: email\n  Development:\n  - EnvPrefix: kube02\n    apiServerURL: https://kube02-api-url:443\n    audience: xxxxxxxxxxx-xxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com\n    providerURL: https://accounts.google.com\n    clientID: xxxxxxxxxxx-xxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com\n    clientSecret: GXXXX-XXXXXXXXXXXXXXXXXXX\n    clusterName: kube02\n    emailClaim: email\n    redirectURL: https://gangway.local/callback\n    scopes:\n    - openid\n    - profile\n    - email\n    tokenURL: https://www.googleapis.com/oauth2/v4/token\n    usernameClaim: email\n  - EnvPrefix: kube03\n    apiServerURL: https://kube03-api-url:443\n    audience: xxxxxxxxxxx-xxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com\n    providerURL: https://accounts.google.com\n    clientID: xxxxxxxxxxx-xxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com\n    clientSecret: GXXXX-XXXXXXXXXXXXXXXXXXX\n    clusterName: kube03\n    emailClaim: email\n    redirectURL: https://gangway.local/callback\n    clusterCAPath: /etc/gangly/pki/kube03/ca.crt\n    scopes:\n    - openid\n    - profile\n    - email\n    tokenURL: https://www.googleapis.com/oauth2/v4/token\n    usernameClaim: email\n</code></pre>"},{"location":"getting-started/helm-deployment/","title":"Helm Chart Configuration for Gangway","text":"<p>This document outlines the configurable parameters of the Helm chart for Gangway and their default values.</p>"},{"location":"getting-started/helm-deployment/#global-parameters","title":"Global Parameters","text":"<ul> <li><code>global.imageRegistry</code>: Global Docker image registry (default: <code>\"\"</code>)</li> <li><code>global.imagePullSecrets</code>: Global Docker registry secret names as an array (default: <code>[]</code>)</li> <li><code>global.storageClass</code>: Global StorageClass for Persistent Volume(s) (default: <code>\"\"</code>)</li> </ul>"},{"location":"getting-started/helm-deployment/#common-parameters","title":"Common Parameters","text":"<ul> <li><code>kubeVersion</code>: Force target Kubernetes version (default: <code>\"\"</code>)</li> <li><code>nameOverride</code>: String to partially override <code>common.names.fullname</code> template (default: <code>\"\"</code>)</li> <li><code>fullnameOverride</code>: String to fully override <code>common.names.fullname</code> template (default: <code>\"\"</code>)</li> <li><code>commonLabels</code>: Labels to add to all deployed objects (default: <code>{}</code>)</li> <li><code>commonAnnotations</code>: Annotations to add to all deployed objects (default: <code>{}</code>)</li> <li><code>clusterDomain</code>: Default Kubernetes cluster domain (default: <code>cluster.local</code>)</li> <li><code>extraDeploy</code>: Array of extra objects to deploy with the release (default: <code>[]</code>)</li> </ul>"},{"location":"getting-started/helm-deployment/#gangway-image-parameters","title":"Gangway Image Parameters","text":"<ul> <li><code>image.registry</code>: Gangway image registry (default: <code>docker.io</code>)</li> <li><code>image.repository</code>: Gangway image repository (default: <code>numberlyinfra/gangway</code>)</li> <li><code>image.tag</code>: Gangway image tag (default: <code>master</code>)</li> <li><code>image.digest</code>: Gangway image digest (default: <code>\"\"</code>)</li> <li><code>image.pullPolicy</code>: Image pull policy (default: <code>Always</code>)</li> <li><code>image.pullSecrets</code>: Specify docker-registry secret names as an array (default: <code>[]</code>)</li> <li><code>image.debug</code>: Enable Gangway image debug mode (default: <code>false</code>)</li> </ul>"},{"location":"getting-started/helm-deployment/#gangway-deployment-parameters","title":"Gangway Deployment Parameters","text":"<ul> <li><code>replicaCount</code>: Number of Gangway replicas to deploy (default: <code>3</code>)</li> <li><code>updateStrategy.type</code>: StrategyType can be set to <code>RollingUpdate</code> or <code>OnDelete</code> (default: <code>RollingUpdate</code>)</li> <li><code>podSecurityContext.enabled</code>: Enable Gangway pods' Security Context (default: <code>true</code>)</li> <li><code>podSecurityContext.fsGroup</code>: Group ID for the volumes of the pod (default: <code>1001</code>)</li> <li><code>containerSecurityContext.enabled</code>: Enable Gangway containers' SecurityContext (default: <code>true</code>)</li> <li><code>containerSecurityContext.runAsUser</code>: User ID to run Gangway containers (default: <code>1001</code>)</li> <li><code>containerSecurityContext.runAsNonRoot</code>: Set Gangway container's Security Context runAsNonRoot (default: <code>true</code>)</li> <li><code>resources.limits</code>: The resources limits for the Gangway container (default: <code>{}</code>)</li> <li><code>resources.requests</code>: The requested resources for the Gangway container (default: <code>{ memory: \"512Mi\", cpu: \"300m\" }</code>)</li> </ul>"},{"location":"getting-started/helm-deployment/#probes","title":"Probes","text":"<ul> <li><code>startupProbe.enabled</code>: Enable startupProbe (default: <code>false</code>)</li> <li><code>livenessProbe.enabled</code>: Enable livenessProbe (default: <code>true</code>)</li> <li><code>readinessProbe.enabled</code>: Enable readinessProbe (default: <code>true</code>)</li> </ul>"},{"location":"getting-started/helm-deployment/#service-configuration","title":"Service Configuration","text":"<ul> <li><code>service.type</code>: Kubernetes Service type (default: <code>ClusterIP</code>)</li> <li><code>service.ports.http</code>: Service HTTP port (default: <code>8080</code>)</li> <li><code>service.sessionAffinity</code>: Session Affinity for Kubernetes service (default: <code>ClientIP</code>)</li> </ul>"},{"location":"getting-started/helm-deployment/#ingress-configuration","title":"Ingress Configuration","text":"<ul> <li><code>ingress.enabled</code>: Set to true to enable ingress record generation (default: <code>false</code>)</li> <li><code>ingress.hostname</code>: Default host for the ingress resource (default: <code>gangway.local</code>)</li> <li><code>ingress.path</code>: The Path to Gangway (default: <code>/</code>)</li> <li><code>ingress.annotations</code>: Additional annotations for the Ingress resource (default: <code>{}</code>)</li> </ul>"},{"location":"getting-started/helm-deployment/#additional-configuration","title":"Additional Configuration","text":"<ul> <li><code>extraEnvVars</code>: Extra environment variables to be set on Gangway container (default: <code>[]</code>)</li> <li><code>extraVolumes</code>: Optionally specify extra list of additional volumes for Gangway pods (default: <code>[]</code>)</li> <li><code>extraVolumeMounts</code>: Optionally specify extra list of additional volumeMounts for Gangway container(s) (default: <code>[]</code>)</li> </ul>"},{"location":"getting-started/helm-deployment/#affinity-and-tolerations","title":"Affinity and Tolerations","text":"<ul> <li><code>podAffinityPreset</code>: Pod affinity preset (default: <code>\"\"</code>)</li> <li><code>podAntiAffinityPreset</code>: Pod anti-affinity preset (default: <code>soft</code>)</li> <li><code>nodeAffinityPreset.type</code>: Node affinity preset type (default: <code>\"\"</code>)</li> <li><code>affinity</code>: Affinity for pod assignment (default: <code>{}</code>)</li> <li><code>nodeSelector</code>: Node labels for pod assignment (default: <code>{}</code>)</li> <li><code>tolerations</code>: Tolerations for pod assignment (default: <code>[]</code>)</li> </ul>"},{"location":"getting-started/helm-deployment/#customization","title":"Customization","text":"<ul> <li><code>command</code>: Override default container command (default: <code>[]</code>)</li> <li><code>args</code>: Override default container args (default: <code>[]</code>)</li> <li><code>lifecycleHooks</code>: for the Gangway container(s) to automate configuration before or after startup (default: <code>{}</code>)</li> <li><code>extraEnvVarsCM</code>: Name of existing ConfigMap containing extra env vars (default: <code>\"\"</code>)</li> <li><code>extraEnvVarsSecret</code>: Name of existing Secret containing extra env vars (default: <code>\"\"</code>)</li> </ul>"},{"location":"getting-started/helm-deployment/#session-and-configuration","title":"Session and Configuration","text":"<ul> <li><code>sessionkey</code>: Session key (default: <code>mySessionKey</code>)</li> <li><code>sessionsalt</code>: Session salt (default: <code>mySessionSalt</code>)</li> <li><code>configuration</code>: Inline configuration for Gangway (default: <code>\"\"</code>)</li> </ul>"},{"location":"getting-started/helm-deployment/#example-of-configuration","title":"Example of configuration :","text":"<p><pre><code>host: 0.0.0.0\nport: 8080\nserveTLS: false\nclusters:\n  Production:\n  - EnvPrefix: kube01\n    apiServerURL: https://kube01-api-url:443\n    audience: xxxxxxxxxxx-xxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com\n    providerURL: https://accounts.google.com\n    clientID: xxxxxxxxxxx-xxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com\n    clientSecret: GXXXX-XXXXXXXXXXXXXXXXXXX\n    clusterName: kube01\n    emailClaim: email\n    redirectURL: https://gangway.local/callback\n    scopes:\n    - openid\n    - profile\n    - email\n    tokenURL: https://www.googleapis.com/oauth2/v4/token\n    usernameClaim: email\n  Development:\n  - EnvPrefix: kube02\n    apiServerURL: https://kube02-api-url:443\n    audience: xxxxxxxxxxx-xxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com\n    providerURL: https://accounts.google.com\n    clientID: xxxxxxxxxxx-xxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com\n    clientSecret: GXXXX-XXXXXXXXXXXXXXXXXXX\n    clusterName: kube02\n    emailClaim: email\n    redirectURL: https://gangway.local/callback\n    scopes:\n    - openid\n    - profile\n    - email\n    tokenURL: https://www.googleapis.com/oauth2/v4/token\n    usernameClaim: email\n  - EnvPrefix: kube03\n    apiServerURL: https://kube03-api-url:443\n    audience: xxxxxxxxxxx-xxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com\n    providerURL: https://accounts.google.com\n    clientID: xxxxxxxxxxx-xxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com\n    clientSecret: GXXXX-XXXXXXXXXXXXXXXXXXX\n    clusterName: kube03\n    emailClaim: email\n    redirectURL: https://gangway.local/callback\n    clusterCAPath: /etc/gangly/pki/kube03/ca.crt\n    scopes:\n    - openid\n    - profile\n    - email\n    tokenURL: https://www.googleapis.com/oauth2/v4/token\n    usernameClaim: email\n</code></pre> To get more informations : Configuration</p>"},{"location":"how-it-works/auth0/","title":"Connecting Gangway to Auth0","text":"<ol> <li>Create an account for Auth0 and login</li> <li>From the dashboard, click \"New Application\"</li> <li>Enter a name and choose \"Single Page Web Applications\"</li> <li>Click on \"Settings\" and gather the relevant information and update the file <code>docs/yaml/02-configmap.yaml</code> and apply to cluster</li> <li>Update the \"Allowed Callback URLs\" to match the \"redirectURL\" parameter in the configmap configured previously</li> <li>Click \"Save Changes\"</li> <li>Add Rule for adding group metadata by clicking on \"Rules\" from the menu</li> <li> <p>Give the rule a name and copy/paste the following:</p> <pre><code>function (user, context, callback) {\n    if (user.app_metadata &amp;&amp; 'groups' in user.app_metadata) {\n        context.idToken.groups = user.app_metadata.groups;\n    } else {\n        context.idToken.groups = [];\n    }\n\ncallback(null, user, context);\n}\n</code></pre> </li> <li> <p>Configure API Server with the following config replacing issuer-url &amp; client-id values:</p> <pre><code>--oidc-issuer-url=https://example.auth0.com/\n--oidc-client-id=&lt;clientid&gt;\n--oidc-username-claim=email\n--oidc-groups-claim=groups\n</code></pre> </li> </ol>"},{"location":"how-it-works/auth0/#example","title":"Example","text":"<p>A typical gangway config for Auth0:</p> <pre><code>clusterName: \"YourCluster\"\nproviderURL: \"https://example.auth0.com\"\nclientID: \"&lt;your client ID&gt;\"\nclientSecret: \"&lt;your client secret&gt;\"\naudience: \"https://example.auth0.com/userinfo\"\nredirectURL: \"https://gangway.example.com/callback\"\nscopes: [\"openid\", \"profile\", \"email\", \"offline_access\"]\nusernameClaim: \"sub\"\nemailClaim: \"email\"\napiServerURL: \"https://kube-apiserver.yourcluster.com\"\n</code></pre>"},{"location":"how-it-works/custom-templates/","title":"Custom Templates","text":"<p>To customize the HTML pages rendered by Gangway, you may provide a set of custom templates to use instead of the built-in ones.</p> <p>Important</p> <p>The data passed to the templates might change between versions, and we do not guarantee that we will maintain backwards compatibility. If using custom templates, extra care must be taken when upgrading Gangway.**</p> <p>To enable this feature, set the <code>customHTMLTemplatesDir</code> option in Gangway's configuration file to a directory that contains the following custom templates:</p> <ul> <li>home.tmpl: Home page template.</li> <li>commandline.tmpl: Post-login template that typically lists the commands needed to configure <code>kubectl</code>.</li> </ul> <p>The templates are processed using Go's <code>html/template</code> package.</p>"},{"location":"how-it-works/dex/","title":"Connecting Gangway to Dex","text":"<p>Dex is a handy tool created by CoreOS that provides a common OIDC endpoint for multiple identity providers. To configure Gangway to communicate with Dex some information will need to be collected from Dex. Following OIDC standard, Dex provides a URL where its OIDC configuration can be gathered. This URL is located at <code>.well-known/openid-configuration</code>. If Dex is configured with an Issuer URL of <code>http://app.example.com</code> its OpenID config can be found at <code>http://app.example.com/.well-known/openid-configuration</code>. An example of the OpenID Configuration provided by Dex:</p> <pre><code>{\n  \"issuer\": \"http://app.example.com\",\n  \"authorization_endpoint\": \"http://app.example.com/auth\",\n  \"token_endpoint\": \"http://app.example.com/token\",\n  \"jwks_uri\": \"http:/app.example.com/keys\",\n  \"response_types_supported\": [\n    \"code\"\n  ],\n  \"subject_types_supported\": [\n    \"public\"\n  ],\n  \"id_token_signing_alg_values_supported\": [\n    \"RS256\"\n  ],\n  \"scopes_supported\": [\n    \"openid\",\n    \"email\",\n    \"groups\",\n    \"profile\",\n    \"offline_access\"\n  ],\n  \"token_endpoint_auth_methods_supported\": [\n    \"client_secret_basic\"\n  ],\n  \"claims_supported\": [\n    \"aud\",\n    \"email\",\n    \"email_verified\",\n    \"exp\",\n    \"iat\",\n    \"iss\",\n    \"locale\",\n    \"name\",\n    \"sub\"\n  ]\n}\n</code></pre> <p>Using the Gangway example, just provide your Dex installation as provider. The Dex configuration provides a list   named <code>claims_supported</code> which can be chosen from when defining both <code>username_claim</code> and <code>email_claim</code>.  The correct claim to use depends on the upstream identity provider that dex is configured for.   <code>client_id</code> and <code>client_secret</code> are strings that can be any value, but they must match the Client ID and Secret in your Dex configuration.</p>"},{"location":"how-it-works/google/","title":"Connecting Gangway to Google","text":"<p>It is possible to use Google as an OAuth provider with gangway. To do so follow the instructions below:</p>"},{"location":"how-it-works/google/#setting-up-google-oauth","title":"Setting Up Google OAuth","text":"<ul> <li>Head to Credentials area of Google Cloud: <code>https://console.cloud.google.com/apis/credentials?project=&lt;your-google-cloud-project-name&gt;</code>. If previously you haven't created any credentials, you should see an empty list</li> </ul> <ul> <li>In that page, click on \"Create credentials\". A menu will pop-over. From that menu click on \"OAuth client ID\".</li> </ul> <ul> <li>In the page you will land, choose \"Web application\" for the type, then give the oath client id a name and fill in the the callback url appropriately, then click \"Create\".</li> </ul> <ul> <li> <p>If successful, you'll be prompted in the modal window if you want to copy the client id and secret. Click \"OK\" to close.</p> </li> <li> <p>In the list, you should see the credentials we just created. To the right, there are 3 action icons. Click on the downward \"download\" arrow.</p> </li> </ul>"},{"location":"how-it-works/google/#configuring-gangway","title":"Configuring gangway","text":"<p>You now need to configure gangway. Here is a typical config file:</p> <pre><code># Your Cluster Name. There's no strict mapping, so it can be anything\nclusterName: \"your_cluster_name\"\n\n# The URL to do discovery on\nproviderUrl: \"https://accounts.google.com/\"\n\n# API Client ID. Get from Google credentials \"client_id\" field\nclientId: \"12345678901234567890.apps.googleusercontent.com\"\n\n# API Client Secret. Get from Google credentials \"client_secret\" field\nclientSecret: \"FRGegerwgfsFE_fefdsf\"\n\n# Endpoint that provides user profile information.\n# For Google's purpose is the same as your client_id\naudience: \"923798723208-9pq62pkrnbhumipnqs4v0a1iu7ij01fo.apps.googleusercontent.com\"\n\n# Where to redirect back to. This should be a URL\n# Where gangway is reachable. Cannot be a raw IP address. Must be a valid TLD.\nredirectUrl: \"https://url.kuberneters.cluster.com/callback\"\n\n# Used to specify the scope of the requested authorisation in OAuth.\n# Unlike with Auth0, we do not need \"offline\"\nscopes: [\"openid\", \"profile\", \"email\"]\n\n# What field to look at in the token to pull the username from, leave as is\nusernameClaim: \"sub\"\n\n# What field to look at in the token to pull the email from, leave as is\nemailClaim: \"email\"\n\n# The API server to use when configuring kubectl for the user\napiServerURL: \"https://kube-apiserver.yourcluster.com\"\n</code></pre>"},{"location":"how-it-works/how-it-works/","title":"How It Works","text":"<p>Kubernetes supports OpenID Connect (OIDC) as a user authentication mechanism. OIDC is an authentication protocol that allows servers to verify the identity of a user by way of an ID Token.</p> <p>When using OIDC to authenticate with Kubernetes, the client (e.g. <code>kubectl</code>) sends the ID token alongside all requests to the API server. On the server side, the Kubernetes API server verifies the token to ensure it is valid and has not expired. Once verified, the API server extracts username and group membership information from the token, and continues processing the request.</p> <p>In order to obtain the ID token, the user must go through the OIDC authentication process. This is where Gangway comes in. Gangway is a web application that enables the OIDC authentication flow which results in the minting of the ID Token.</p> <p>Gangway is configured as a client of an upstream Identity Service that speaks OIDC. To obtain the ID token, the user accesses Gangway, initiates the OIDC flow by clicking the \"Log In\" button, and completes the flow by authenticating with the upstream Identity Service. The user's credentials are never shared with Gangway.</p> <p>Once the authentication flow is complete, the user is redirected to a Gangway page that provides instructions on how to configure <code>kubectl</code> to use the ID token.</p> <p>The following sequence diagram details the authentication flow:</p> <p></p>"},{"location":"fr/","title":"Documentation de Gangway","text":""},{"location":"fr/#gangway","title":"gangway","text":"<p>(noun): An opening in the bulwark of the ship to allow passengers to board or leave the ship.</p> <p>Une application qui peut \u00eatre utilis\u00e9e pour faciliter les flux d'authentification via OIDC pour un cluster Kubernetes. Kubernetes prend en charge les jetons OpenID Connect comme moyen d'identifier les utilisateurs qui acc\u00e8dent au cluster. Gangway a \u00e9t\u00e9 am\u00e9lior\u00e9 et est maintenant capable de g\u00e9rer plusieurs clusters. Gangway permet aux utilisateurs de configurer eux-m\u00eames leur configuration <code>kubectl</code> en quelques \u00e9tapes simples.</p> <p></p> <p>Une fois authentifi\u00e9 pour l'un de vos clusters :</p> <p></p>"},{"location":"fr/getting-started/api-flags/#parametres-du-serveur-api","title":"Param\u00e8tres du serveur API","text":"<p>Gangway n\u00e9cessite que le serveur API Kubernetes soit configur\u00e9 pour OIDC :</p> <p>https://kubernetes.io/docs/admin/authentication/#configuring-the-api-server</p> <pre><code>kube-apiserver\n...\n--oidc-issuer-url=\"https://example.auth0.com/\"\n--oidc-client-id=3YM4ue8MoXgBkvCIHh00000000000\n--oidc-username-claim=email\n--oidc-groups-claim=groups\n</code></pre>"},{"location":"fr/getting-started/build/#construction","title":"Construction","text":"<p>Exigences pour la construction</p> <ul> <li>Go (construit avec la version &gt;= 1.21)</li> </ul> <p>Un Makefile est fourni pour les t\u00e2ches de construction. Les options sont les suivantes :</p> <p>Pour commencer, c'est aussi simple que :</p> <pre><code>go get -u github.com/soulkyu/gangway\ncd $GOPATH/src/github.com/soulkyu/gangway\nmake setup\nmake\n</code></pre>"},{"location":"fr/getting-started/configuration/","title":"Configuration de Gangway","text":"<p>Gangway lit un fichier de configuration au d\u00e9marrage. Le chemin vers le fichier de configuration doit \u00eatre d\u00e9fini \u00e0 l'aide du drapeau <code>--config</code>.</p> <p>Le fichier de configuration doit \u00eatre au format YAML et contenir un dictionnaire (alias hash ou map) de paires cl\u00e9/valeur. Les options disponibles sont d\u00e9crites ci-dessous.</p>"},{"location":"fr/getting-started/configuration/#options-de-configuration","title":"Options de Configuration","text":"<p>Les options suivantes peuvent \u00eatre d\u00e9finies via le fichier de configuration YAML.</p>"},{"location":"fr/getting-started/configuration/#configuration-generale","title":"Configuration G\u00e9n\u00e9rale","text":"Cl\u00e9 Description <code>host</code> L'adresse sur laquelle \u00e9couter. Par d\u00e9faut \u00e0 <code>0.0.0.0</code> (toutes les interfaces). <code>port</code> Le port sur lequel \u00e9couter. Par d\u00e9faut \u00e0 <code>8080</code>. <code>serveTLS</code> Gangway doit-il utiliser TLS au lieu de HTTP simple ? Par d\u00e9faut \u00e0 <code>false</code>. <code>certFile</code> Le fichier de certificat public \u00e0 utiliser lors de l'utilisation de TLS. Par d\u00e9faut \u00e0 <code>/etc/gangway/tls/tls.crt</code>. <code>keyFile</code> Le fichier de cl\u00e9 priv\u00e9e lors de l'utilisation de TLS. Par d\u00e9faut \u00e0 <code>/etc/gangway/tls/tls.key</code>. <code>trustedCAPath</code> Chemin vers une CA racine de confiance pour les certificats auto-sign\u00e9s aux URL Oauth2. <code>httpPath</code> Le chemin utilis\u00e9 par gangway pour cr\u00e9er des URL. Par d\u00e9faut \u00e0 <code>\"\"</code>, en supprimant tout slash final. <code>sessionSecurityKey</code> La cl\u00e9 de s\u00e9curit\u00e9 de session. <code>sessionSalt</code> Le sel de session. Valeur par d\u00e9faut cod\u00e9e en dur <code>MkmfuPNHnZBBivy0L0aW</code>. <code>customHTMLTemplatesDir</code> Chemin vers un r\u00e9pertoire contenant des mod\u00e8les HTML personnalis\u00e9s. <code>customAssetsDir</code> Chemin vers un r\u00e9pertoire contenant des actifs."},{"location":"fr/getting-started/configuration/#configuration-multi-cluster","title":"Configuration Multi-Cluster","text":"<p>La configuration multi-cluster permet des configurations sp\u00e9cifiques pour chaque cluster au sein d'un seul fichier.</p>"},{"location":"fr/getting-started/configuration/#cluster-de-production","title":"Cluster de Production","text":"<ul> <li>EnvPrefix : <code>kube01</code></li> <li>apiServerURL : <code>https://kube01-api-url:443</code></li> <li>audience : <code>xxxxxxxxxxx-xxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com</code></li> <li>providerURL : <code>https://accounts.google.com</code></li> <li>clientID : <code>xxxxxxxxxxx-xxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com</code></li> <li>clientSecret : <code>GXXXX-XXXXXXXXXXXXXXXXXXX</code></li> <li>clusterName : <code>kube01</code></li> <li>emailClaim : <code>email</code></li> <li>redirectURL : <code>https://gangway.local/callback</code></li> <li>scopes : <code>[\"openid\", \"profile\", \"email\"]</code></li> <li>tokenURL : <code>https://www.googleapis.com/oauth2/v4/token</code></li> <li>usernameClaim : <code>email</code></li> </ul>"},{"location":"fr/getting-started/configuration/#clusters-de-developpement","title":"Clusters de D\u00e9veloppement","text":"<ul> <li>Cluster 1 (kube02)</li> <li>EnvPrefix : <code>kube02</code></li> <li>apiServerURL : <code>https://kube02-api-url:443</code></li> <li> <p>... (identique au cluster de Production)</p> </li> <li> <p>Cluster 2 (kube03)</p> </li> <li>EnvPrefix : <code>kube03</code></li> <li>apiServerURL : <code>https://kube03-api-url:443</code></li> <li>clusterCAPath : <code>/etc/gangly/pki/kube03/ca.crt</code></li> <li>... (identique au cluster de Production)</li> </ul>"},{"location":"fr/getting-started/configuration/#configuration-specifique-au-cluster","title":"Configuration Sp\u00e9cifique au Cluster","text":"<p>Chaque cluster peut avoir les configurations suivantes :</p> Cl\u00e9 Description <code>clusterName</code> Le nom du cluster. Utilis\u00e9 dans l'UI et les instructions de configuration de kubectl. <code>providerURL</code> URL du fournisseur OAuth2. Doit offrir un point de terminaison <code>$providerURL/.well-known/openid-configuration</code> pour la d\u00e9couverte. <code>clientID</code> ID client API tel que fourni par le fournisseur d'identit\u00e9. <code>clientSecret</code> Secret client API tel que fourni par le fournisseur d'identit\u00e9. <code>allowEmptyClientSecret</code> Certains fournisseurs d'identit\u00e9 acceptent un secret client vide, ce qui n'est g\u00e9n\u00e9ralement pas une bonne id\u00e9e. Si vous devez utiliser un secret vide et accepter les risques associ\u00e9s, alors vous pouvez le d\u00e9finir sur <code>true</code>. Par d\u00e9faut \u00e0 <code>false</code>. <code>audience</code> Le point de terminaison qui fournit des informations de profil utilisateur [optionnel]. Non requis par tous les fournisseurs. <code>scopes</code> Utilis\u00e9 pour sp\u00e9cifier la port\u00e9e de la demande d'autorisation OAuth. Par d\u00e9faut \u00e0 <code>[\"openid\", \"profile\", \"email\", \"offline_access\"]</code>. <code>redirectURL</code> O\u00f9 rediriger apr\u00e8s l'authentification. Cela devrait \u00eatre une URL o\u00f9 Gangway est accessible. Typiquement, cela doit \u00e9galement \u00eatre enregistr\u00e9 dans l'application OAuth avec le fournisseur OAuth. <code>usernameClaim</code> La revendication JWT \u00e0 utiliser comme nom d'utilisateur. Cela est utilis\u00e9 dans l'UI. Combin\u00e9 avec le clusterName pour la partie \"utilisateur\" de kubeconfig. Par d\u00e9faut \u00e0 <code>nickname</code>. <code>emailClaim</code> La revendication JWT \u00e0 utiliser comme email. Par d\u00e9faut \u00e0 <code>email</code>. <code>apiServerURL</code> Le point de terminaison du serveur API utilis\u00e9 pour configurer kubectl. <code>clusterCAPath</code> Chemin pour trouver le bundle CA pour le serveur API. Utilis\u00e9 pour configurer kubectl. Ce chemin est g\u00e9n\u00e9ralement mont\u00e9 \u00e0 l'emplacement par d\u00e9faut pour les charges de travail fonctionnant sur un cluster Kubernetes et n'a g\u00e9n\u00e9ralement pas besoin d'\u00eatre d\u00e9fini. Par d\u00e9faut \u00e0 <code>/var/run/secrets/kubernetes.io/serviceaccount/ca.crt</code>. <code>showClaims</code> Afficher les revendications re\u00e7ues. Par d\u00e9faut \u00e0 <code>true</code>."},{"location":"fr/getting-started/configuration/#fonctions-supplementaires","title":"Fonctions Suppl\u00e9mentaires","text":"<ul> <li><code>NewMultiClusterConfig</code> : Cr\u00e9e une nouvelle instance de configuration multi-cluster \u00e0 partir d'un fichier de configuration s\u00e9rialis\u00e9.</li> <li><code>Validate</code> : V\u00e9rifie toutes les propri\u00e9t\u00e9s de la structure de configuration pour s'assurer qu'elles sont initialis\u00e9es.</li> <li><code>GetRootPathPrefix</code> : Retourne '/' si aucun pr\u00e9fixe n'est sp\u00e9cifi\u00e9, sinon retourne le chemin configur\u00e9.</li> <li><code>loadCerts</code> : Charge les certificats pour les configurations de cluster \u00e0 partir des chemins sp\u00e9cifi\u00e9s.</li> </ul>"},{"location":"fr/getting-started/configuration/#utilisation-des-variables-denvironnement","title":"Utilisation des Variables d'Environnement","text":"<p>Les variables d'environnement peuvent \u00eatre utilis\u00e9es pour remplacer les configurations sp\u00e9cifi\u00e9es dans le fichier YAML en utilis</p>"},{"location":"fr/getting-started/deployment/","title":"D\u00e9ploiement de Gangway","text":"<p>Le d\u00e9ploiement de Gangway consiste \u00e0 \u00e9crire un fichier de configuration, puis \u00e0 d\u00e9ployer le service. Le service est sans \u00e9tat, il est donc relativement facile \u00e0 g\u00e9rer sur Kubernetes. La mani\u00e8re dont vous fournirez l'acc\u00e8s au service d\u00e9pendra de votre configuration sp\u00e9cifique.</p> <p>Gangway est maintenant conscient d'une configuration multi-cluster, nous avons d\u00e9velopp\u00e9 un chart Helm qui facilitera le d\u00e9ploiement.</p> <p>Voici un exemple de configuration :</p> <pre><code>host: 0.0.0.0\nport: 8080\nserveTLS: false\nclusters:\n  Production:\n  - EnvPrefix: kube01\n    apiServerURL: https://kube01-api-url:443\n    audience: xxxxxxxxxxx-xxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com\n    providerURL: https://accounts.google.com\n    clientID: xxxxxxxxxxx-xxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com\n    clientSecret: GXXXX-XXXXXXXXXXXXXXXXXXX\n    clusterName: kube01\n    emailClaim: email\n    redirectURL: https://gangway.local/callback\n    scopes:\n    - openid\n    - profile\n    - email\n    tokenURL: https://www.googleapis.com/oauth2/v4/token\n    usernameClaim: email\n  Development:\n  - EnvPrefix: kube02\n    apiServerURL: https://kube02-api-url:443\n    audience: xxxxxxxxxxx-xxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com\n    providerURL: https://accounts.google.com\n    clientID: xxxxxxxxxxx-xxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com\n    clientSecret: GXXXX-XXXXXXXXXXXXXXXXXXX\n    clusterName: kube02\n    emailClaim: email\n    redirectURL: https://gangway.local/callback\n    scopes:\n    - openid\n    - profile\n    - email\n    tokenURL: https://www.googleapis.com/oauth2/v4/token\n    usernameClaim: email\n  - EnvPrefix: kube03\n    apiServerURL: https://kube03-api-url:443\n    audience: xxxxxxxxxxx-xxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com\n    providerURL: https://accounts.google.com\n    clientID: xxxxxxxxxxx-xxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com\n    clientSecret: GXXXX-XXXXXXXXXXXXXXXXXXX\n    clusterName: kube03\n    emailClaim: email\n    redirectURL: https://gangway.local/callback\n    clusterCAPath: /etc/gangly/pki/kube03/ca.crt\n    scopes:\n    - openid\n    - profile\n    - email\n    tokenURL: https://www.googleapis.com/oauth2/v4/token\n    usernameClaim: email\n</code></pre>"},{"location":"fr/getting-started/helm-deployment/","title":"Configuration du Chart Helm pour Gangway","text":"<p>Ce document d\u00e9crit les param\u00e8tres configurables du chart Helm pour Gangway et leurs valeurs par d\u00e9faut.</p>"},{"location":"fr/getting-started/helm-deployment/#parametres-globaux","title":"Param\u00e8tres Globaux","text":"<ul> <li><code>global.imageRegistry</code> : Registre global d'images Docker (par d\u00e9faut : <code>\"\"</code>)</li> <li><code>global.imagePullSecrets</code> : Noms des secrets de registre Docker global sous forme de tableau (par d\u00e9faut : <code>[]</code>)</li> <li><code>global.storageClass</code> : Classe de stockage globale pour le(s) volume(s) persistant(s) (par d\u00e9faut : <code>\"\"</code>)</li> </ul>"},{"location":"fr/getting-started/helm-deployment/#parametres-communs","title":"Param\u00e8tres Communs","text":"<ul> <li><code>kubeVersion</code> : Forcer la version cible de Kubernetes (par d\u00e9faut : <code>\"\"</code>)</li> <li><code>nameOverride</code> : Cha\u00eene pour remplacer partiellement le mod\u00e8le <code>common.names.fullname</code> (par d\u00e9faut : <code>\"\"</code>)</li> <li><code>fullnameOverride</code> : Cha\u00eene pour remplacer enti\u00e8rement le mod\u00e8le <code>common.names.fullname</code> (par d\u00e9faut : <code>\"\"</code>)</li> <li><code>commonLabels</code> : \u00c9tiquettes \u00e0 ajouter \u00e0 tous les objets d\u00e9ploy\u00e9s (par d\u00e9faut : <code>{}</code>)</li> <li><code>commonAnnotations</code> : Annotations \u00e0 ajouter \u00e0 tous les objets d\u00e9ploy\u00e9s (par d\u00e9faut : <code>{}</code>)</li> <li><code>clusterDomain</code> : Domaine de cluster Kubernetes par d\u00e9faut (par d\u00e9faut : <code>cluster.local</code>)</li> <li><code>extraDeploy</code> : Tableau d'objets suppl\u00e9mentaires \u00e0 d\u00e9ployer avec la release (par d\u00e9faut : <code>[]</code>)</li> </ul>"},{"location":"fr/getting-started/helm-deployment/#parametres-de-limage-gangway","title":"Param\u00e8tres de l'Image Gangway","text":"<ul> <li><code>image.registry</code> : Registre d'image Gangway (par d\u00e9faut : <code>docker.io</code>)</li> <li><code>image.repository</code> : D\u00e9p\u00f4t d'image Gangway (par d\u00e9faut : <code>numberlyinfra/gangway</code>)</li> <li><code>image.tag</code> : Tag de l'image Gangway (par d\u00e9faut : <code>master</code>)</li> <li><code>image.digest</code> : Digest de l'image Gangway (par d\u00e9faut : <code>\"\"</code>)</li> <li><code>image.pullPolicy</code> : Politique de t\u00e9l\u00e9chargement de l'image (par d\u00e9faut : <code>Always</code>)</li> <li><code>image.pullSecrets</code> : Sp\u00e9cifier les noms des secrets de registre Docker sous forme de tableau (par d\u00e9faut : <code>[]</code>)</li> <li><code>image.debug</code> : Activer le mode debug de l'image Gangway (par d\u00e9faut : <code>false</code>)</li> </ul>"},{"location":"fr/getting-started/helm-deployment/#parametres-de-deploiement-de-gangway","title":"Param\u00e8tres de D\u00e9ploiement de Gangway","text":"<ul> <li><code>replicaCount</code> : Nombre de r\u00e9pliques de Gangway \u00e0 d\u00e9ployer (par d\u00e9faut : <code>3</code>)</li> <li><code>updateStrategy.type</code> : StrategyType peut \u00eatre d\u00e9fini sur <code>RollingUpdate</code> ou <code>OnDelete</code> (par d\u00e9faut : <code>RollingUpdate</code>)</li> <li><code>podSecurityContext.enabled</code> : Activer le contexte de s\u00e9curit\u00e9 des pods Gangway (par d\u00e9faut : <code>true</code>)</li> <li><code>podSecurityContext.fsGroup</code> : ID de groupe pour les volumes du pod (par d\u00e9faut : <code>1001</code>)</li> <li><code>containerSecurityContext.enabled</code> : Activer le contexte de s\u00e9curit\u00e9 des conteneurs Gangway (par d\u00e9faut : <code>true</code>)</li> <li><code>containerSecurityContext.runAsUser</code> : ID utilisateur pour ex\u00e9cuter les conteneurs Gangway (par d\u00e9faut : <code>1001</code>)</li> <li><code>containerSecurityContext.runAsNonRoot</code> : D\u00e9finir le contexte de s\u00e9curit\u00e9 du conteneur Gangway runAsNonRoot (par d\u00e9faut : <code>true</code>)</li> <li><code>resources.limits</code> : Les limites de ressources pour le conteneur Gangway (par d\u00e9faut : <code>{}</code>)</li> <li><code>resources.requests</code> : Les ressources demand\u00e9es pour le conteneur Gangway (par d\u00e9faut : <code>{ memory: \"512Mi\", cpu: \"300m\" }</code>)</li> </ul>"},{"location":"fr/getting-started/helm-deployment/#probes","title":"Probes","text":"<ul> <li><code>startupProbe.enabled</code> : Activer startupProbe (par d\u00e9faut : <code>false</code>)</li> <li><code>livenessProbe.enabled</code> : Activer livenessProbe (par d\u00e9faut : <code>true</code>)</li> <li><code>readinessProbe.enabled</code> : Activer readinessProbe (par d\u00e9faut : <code>true</code>)</li> </ul>"},{"location":"fr/getting-started/helm-deployment/#configuration-du-service","title":"Configuration du Service","text":"<ul> <li><code>service.type</code> : Type de service Kubernetes (par d\u00e9faut : <code>ClusterIP</code>)</li> <li><code>service.ports.http</code> : Port HTTP du service (par d\u00e9faut : <code>8080</code>)</li> <li><code>service.sessionAffinity</code> : Affinit\u00e9 de session pour le service Kubernetes (par d\u00e9faut : <code>ClientIP</code>)</li> </ul>"},{"location":"fr/getting-started/helm-deployment/#configuration-de-lingress","title":"Configuration de l'Ingress","text":"<ul> <li><code>ingress.enabled</code> : D\u00e9finir sur true pour activer la g\u00e9n\u00e9ration de l'enregistrement d'ingress (par d\u00e9faut : <code>false</code>)</li> <li><code>ingress.hostname</code> : H\u00f4te par d\u00e9faut pour la ressource ingress (par d\u00e9faut : <code>gangway.local</code>)</li> <li><code>ingress.path</code> : Le chemin vers Gangway (par d\u00e9faut : <code>/</code>)</li> <li><code>ingress.annotations</code> : Annotations suppl\u00e9mentaires pour la ressource Ingress (par d\u00e9faut : <code>{}</code>)</li> </ul>"},{"location":"fr/getting-started/helm-deployment/#configuration-supplementaire","title":"Configuration Suppl\u00e9mentaire","text":"<ul> <li><code>extraEnvVars</code> : Variables d'environnement suppl\u00e9mentaires \u00e0 d\u00e9finir sur le conteneur Gangway (par d\u00e9faut : <code>[]</code>)</li> <li><code>extraVolumes</code> : Sp\u00e9cifier \u00e9ventuellement une liste suppl\u00e9mentaire de volumes pour les pods Gangway (par d\u00e9faut : <code>[]</code>)</li> <li><code>extraVolumeMounts</code> : Sp\u00e9cifier \u00e9ventuellement une liste suppl\u00e9mentaire de volumeMounts pour le(s) conteneur(s) Gangway (par d\u00e9faut : <code>[]</code>)</li> </ul>"},{"location":"fr/getting-started/helm-deployment/#affinite-et-tolerances","title":"Affinit\u00e9 et Tol\u00e9rances","text":"<ul> <li><code>podAffinityPreset</code> : Pr\u00e9r\u00e9glage d'affinit\u00e9 de pod (par d\u00e9faut : <code>\"\"</code>)</li> <li><code>podAntiAffinityPreset</code> : Pr\u00e9r\u00e9glage d'anti-affinit\u00e9 de pod (par d\u00e9faut : <code>soft</code>)</li> <li><code>nodeAffinityPreset.type</code> : Type de pr\u00e9r\u00e9glage d'affinit\u00e9 de n\u0153ud (par d\u00e9faut : <code>\"\"</code>)</li> <li><code>affinity</code> : Affinit\u00e9 pour l'assignation de pod (par d\u00e9faut : <code>{}</code>)</li> <li><code>nodeSelector</code> : \u00c9tiquettes de n\u0153ud pour l'assignation de pod (par d\u00e9faut : <code>{}</code>)</li> <li><code>tolerations</code> : Tol\u00e9rances pour l'assignation de pod (par d\u00e9faut : <code>[]</code>)</li> </ul>"},{"location":"fr/getting-started/helm-deployment/#personnalisation","title":"Personnalisation","text":"<ul> <li><code>command</code> : Remplacer la commande par d\u00e9faut du conteneur (par d\u00e9faut : <code>[]</code>)</li> <li><code>args</code> : Remplacer les arguments par d\u00e9faut du conteneur (par d\u00e9faut : <code>[]</code>)</li> <li><code>lifecycleHooks</code> : pour le(s) conteneur(s) Gangway afin d'automatiser la configuration avant ou apr\u00e8s le d\u00e9marrage (par d\u00e9faut : <code>{}</code>)</li> <li><code>extraEnvVarsCM</code> : Nom du ConfigMap existant contenant des variables d'environnement suppl\u00e9mentaires (par d\u00e9faut : <code>\"\"</code>)</li> <li><code>extraEnvVarsSecret</code> : Nom du Secret existant contenant des variables d'environnement suppl\u00e9mentaires (par d\u00e9faut : <code>\"\"</code>)</li> </ul>"},{"location":"fr/getting-started/helm-deployment/#session-et-configuration","title":"Session et Configuration","text":"<ul> <li><code>sessionkey</code> : Cl\u00e9 de session (par d\u00e9faut : <code>mySessionKey</code>)</li> <li><code>sessionsalt</code> : Sel de session (par d\u00e9faut : <code>mySessionSalt</code>)</li> <li><code>configuration</code> : Configuration en ligne pour Gangway (par d\u00e9faut : <code>\"\"</code>)</li> </ul>"},{"location":"fr/getting-started/helm-deployment/#exemple-de-configuration","title":"Exemple de configuration :","text":"<p><pre><code>host: 0.0.0.0\nport: 8080\nserveTLS: false\nclusters:\n  Production:\n  - EnvPrefix: kube01\n    apiServerURL: https://kube01-api-url:443\n    audience: xxxxxxxxxxx-xxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com\n    providerURL: https://accounts.google.com\n    clientID: xxxxxxxxxxx-xxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com\n    clientSecret: GXXXX-XXXXXXXXXXXXXXXXXXX\n    clusterName: kube01\n    emailClaim: email\n    redirectURL: https://gangway.local/callback\n    scopes:\n    - openid\n    - profile\n    - email\n    tokenURL: https://www.googleapis.com/oauth2/v4/token\n    usernameClaim: email\n  Development:\n  - EnvPrefix: kube02\n    apiServerURL: https://kube02-api-url:443\n    audience: xxxxxxxxxxx-xxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com\n    providerURL: https://accounts.google.com\n    clientID: xxxxxxxxxxx-xxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com\n    clientSecret: GXXXX-XXXXXXXXXXXXXXXXXXX\n    clusterName: kube02\n    emailClaim: email\n    redirectURL: https://gangway.local/callback\n    scopes:\n    - openid\n    - profile\n    - email\n    tokenURL: https://www.googleapis.com/oauth2/v4/token\n    usernameClaim: email\n  - EnvPrefix: kube03\n    apiServerURL: https://kube03-api-url:443\n    audience: xxxxxxxxxxx-xxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com\n    providerURL: https://accounts.google.com\n    clientID: xxxxxxxxxxx-xxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com\n    clientSecret: GXXXX-XXXXXXXXXXXXXXXXXXX\n    clusterName: kube03\n    emailClaim: email\n    redirectURL: https://gangway.local/callback\n    clusterCAPath: /etc/gangly/pki/kube03/ca.crt\n    scopes:\n    - openid\n    - profile\n    - email\n    tokenURL: https://www.googleapis.com/oauth2/v4/token\n    usernameClaim: email\n</code></pre> To get more informations : Configuration</p>"},{"location":"fr/how-it-works/auth0/","title":"Connexion de Gangway \u00e0 Auth0","text":"<ol> <li>Cr\u00e9ez un compte pour Auth0 et connectez-vous.</li> <li>Depuis le tableau de bord, cliquez sur \"Nouvelle Application\".</li> <li>Entrez un nom et choisissez \"Applications Web \u00e0 Page Unique\".</li> <li>Cliquez sur \"Param\u00e8tres\" et rassemblez les informations pertinentes, puis mettez \u00e0 jour le fichier <code>docs/yaml/02-configmap.yaml</code> et appliquez-le au cluster.</li> <li>Mettez \u00e0 jour les \"URL de Rappel Autoris\u00e9es\" pour correspondre au param\u00e8tre \"redirectURL\" dans la configmap configur\u00e9e pr\u00e9c\u00e9demment.</li> <li>Cliquez sur \"Enregistrer les Changements\".</li> <li>Ajoutez une r\u00e8gle pour ajouter des m\u00e9tadonn\u00e9es de groupe en cliquant sur \"R\u00e8gles\" dans le menu.</li> <li> <p>Donnez un nom \u00e0 la r\u00e8gle et copiez/collez ce qui suit :</p> <pre><code>function (user, context, callback) {\n    if (user.app_metadata &amp;&amp; 'groups' in user.app_metadata) {\n        context.idToken.groups = user.app_metadata.groups;\n    } else {\n        context.idToken.groups = [];\n    }\n\ncallback(null, user, context);\n}\n</code></pre> </li> <li> <p>Configurez le serveur API avec la configuration suivante en rempla\u00e7ant les valeurs issuer-url et client-id :</p> <pre><code>--oidc-issuer-url=https://example.auth0.com/\n--oidc-client-id=&lt;clientid&gt;\n--oidc-username-claim=email\n--oidc-groups-claim=groups\n</code></pre> </li> </ol>"},{"location":"fr/how-it-works/auth0/#exemple","title":"Exemple","text":"<p>Une configuration typique de gangway pour Auth0 :</p> <pre><code>clusterName: \"VotreCluster\"\nproviderURL: \"https://example.auth0.com\"\nclientID: \"&lt;votre ID client&gt;\"\nclientSecret: \"&lt;votre secret client&gt;\"\naudience: \"https://example.auth0.com/userinfo\"\nredirectURL: \"https://gangway.example.com/callback\"\nscopes: [\"openid\", \"profile\", \"email\", \"offline_access\"]\nusernameClaim: \"sub\"\nemailClaim: \"email\"\napiServerURL: \"https://kube-apiserver.votrecluster.com\"\n</code></pre>"},{"location":"fr/how-it-works/custom-templates/","title":"Mod\u00e8les Personnalis\u00e9s","text":"<p>Pour personnaliser les pages HTML rendues par Gangway, vous pouvez fournir un ensemble de mod\u00e8les personnalis\u00e9s \u00e0 utiliser \u00e0 la place de ceux int\u00e9gr\u00e9s.</p> <p>Important</p> <p>Les donn\u00e9es transmises aux mod\u00e8les peuvent changer entre les versions, et nous ne garantissons pas que nous maintiendrons la compatibilit\u00e9 avec les versions ant\u00e9rieures. Si vous utilisez des mod\u00e8les personnalis\u00e9s, une attention particuli\u00e8re doit \u00eatre port\u00e9e lors de la mise \u00e0 niveau de Gangway.**</p> <p>Pour activer cette fonctionnalit\u00e9, d\u00e9finissez l'option <code>customHTMLTemplatesDir</code> dans le fichier de configuration de Gangway pour un r\u00e9pertoire qui contient les mod\u00e8les personnalis\u00e9s suivants :</p> <ul> <li>home.tmpl : Mod\u00e8le de la page d'accueil.</li> <li>commandline.tmpl : Mod\u00e8le post-connexion qui liste g\u00e9n\u00e9ralement les commandes n\u00e9cessaires pour configurer <code>kubectl</code>.</li> </ul> <p>Les mod\u00e8les sont trait\u00e9s en utilisant le package <code>html/template</code> de Go.</p>"},{"location":"fr/how-it-works/dex/","title":"Connexion de Gangway \u00e0 Dex","text":"<p>Dex est un outil pratique cr\u00e9\u00e9 par CoreOS qui fournit un point de terminaison OIDC commun pour plusieurs fournisseurs d'identit\u00e9. Pour configurer Gangway afin de communiquer avec Dex, certaines informations doivent \u00eatre collect\u00e9es aupr\u00e8s de Dex. Suivant la norme OIDC, Dex fournit une URL o\u00f9 sa configuration OIDC peut \u00eatre rassembl\u00e9e. Cette URL se trouve \u00e0 <code>.well-known/openid-configuration</code>. Si Dex est configur\u00e9 avec une URL d'\u00e9metteur de <code>http://app.example.com</code>, sa configuration OpenID peut \u00eatre trouv\u00e9e \u00e0 <code>http://app.example.com/.well-known/openid-configuration</code>. Un exemple de la configuration OpenID fournie par Dex :</p> <pre><code>{\n  \"issuer\": \"http://app.example.com\",\n  \"authorization_endpoint\": \"http://app.example.com/auth\",\n  \"token_endpoint\": \"http://app.example.com/token\",\n  \"jwks_uri\": \"http:/app.example.com/keys\",\n  \"response_types_supported\": [\n    \"code\"\n  ],\n  \"subject_types_supported\": [\n    \"public\"\n  ],\n  \"id_token_signing_alg_values_supported\": [\n    \"RS256\"\n  ],\n  \"scopes_supported\": [\n    \"openid\",\n    \"email\",\n    \"groups\",\n    \"profile\",\n    \"offline_access\"\n  ],\n  \"token_endpoint_auth_methods_supported\": [\n    \"client_secret_basic\"\n  ],\n  \"claims_supported\": [\n    \"aud\",\n    \"email\",\n    \"email_verified\",\n    \"exp\",\n    \"iat\",\n    \"iss\",\n    \"locale\",\n    \"name\",\n    \"sub\"\n  ]\n}\n</code></pre> <p>En utilisant l'exemple de Gangway, il suffit de fournir votre installation Dex comme fournisseur. La configuration de Dex fournit une liste  nomm\u00e9e <code>claims_supported</code> parmi laquelle vous pouvez choisir lors de la d\u00e9finition de <code>username_claim</code> et <code>email_claim</code>. La revendication correcte \u00e0 utiliser d\u00e9pend du fournisseur d'identit\u00e9 en amont pour lequel Dex est configur\u00e9. <code>client_id</code> et <code>client_secret</code> sont des cha\u00eenes de caract\u00e8res qui peuvent avoir n'importe quelle valeur, mais elles doivent correspondre \u00e0 l'ID client et au secret dans votre configuration Dex.</p>"},{"location":"fr/how-it-works/google/","title":"Connexion de Gangway \u00e0 Google","text":"<p>Il est possible d'utiliser Google comme fournisseur OAuth avec Gangway. Pour ce faire, suivez les instructions ci-dessous :</p>"},{"location":"fr/how-it-works/google/#configuration-de-loauth-google","title":"Configuration de l'OAuth Google","text":"<ul> <li>Rendez-vous dans la zone des identifiants de Google Cloud : <code>https://console.cloud.google.com/apis/credentials?project=&lt;nom-de-votre-projet-google-cloud&gt;</code>. Si vous n'avez pas encore cr\u00e9\u00e9 d'identifiants, vous devriez voir une liste vide.</li> </ul> <ul> <li>Sur cette page, cliquez sur \"Cr\u00e9er des identifiants\". Un menu appara\u00eetra. Dans ce menu, cliquez sur \"ID client OAuth\".</li> </ul> <ul> <li>Sur la page o\u00f9 vous arriverez, choisissez \"Application Web\" pour le type, donnez un nom \u00e0 l'ID client OAuth, remplissez l'URL de rappel de mani\u00e8re appropri\u00e9e, puis cliquez sur \"Cr\u00e9er\".</li> </ul> <ul> <li> <p>Si la cr\u00e9ation est r\u00e9ussie, une fen\u00eatre modale vous demandera si vous souhaitez copier l'ID client et le secret. Cliquez sur \"OK\" pour fermer.</p> </li> <li> <p>Dans la liste, vous devriez voir les identifiants que nous venons de cr\u00e9er. \u00c0 droite, il y a 3 ic\u00f4nes d'action. Cliquez sur la fl\u00e8che \"t\u00e9l\u00e9charger\" vers le bas.</p> </li> </ul>"},{"location":"fr/how-it-works/google/#configuration-de-gangway","title":"Configuration de Gangway","text":"<p>Vous devez maintenant configurer Gangway. Voici un fichier de configuration typique :</p> <pre><code># Le nom de votre cluster. Il n'y a pas de correspondance stricte, donc cela peut \u00eatre n'importe quoi\nclusterName: \"nom_de_votre_cluster\"\n\n# L'URL pour faire la d\u00e9couverte\nproviderUrl: \"https://accounts.google.com/\"\n\n# ID client API. Obtenez-le dans le champ \"client_id\" des identifiants Google\nclientId: \"12345678901234567890.apps.googleusercontent.com\"\n\n# Secret client API. Obtenez-le dans le champ \"client_secret\" des identifiants Google\nclientSecret: \"FRGegerwgfsFE_fefdsf\"\n\n# Point de terminaison qui fournit des informations sur le profil utilisateur.\n# Pour Google, c'est le m\u00eame que votre client_id\naudience: \"923798723208-9pq62pkrnbhumipnqs4v0a1iu7ij01fo.apps.googleusercontent.com\"\n\n# O\u00f9 rediriger ensuite. Cela devrait \u00eatre une URL\n# O\u00f9 Gangway est accessible. Ne peut pas \u00eatre une adresse IP brute. Doit \u00eatre un TLD valide.\nredirectUrl: \"https://url.kuberneters.cluster.com/callback\"\n\n# Utilis\u00e9 pour sp\u00e9cifier la port\u00e9e de l'autorisation demand\u00e9e en OAuth.\n# Contrairement \u00e0 Auth0, nous n'avons pas besoin de \"offline\"\nscopes: [\"openid\", \"profile\", \"email\"]\n\n# Quel champ regarder dans le jeton pour extraire le nom d'utilisateur, laissez tel quel\nusernameClaim: \"sub\"\n\n# Quel champ regarder dans le jeton pour extraire l'email, laissez tel quel\nemailClaim: \"email\"\n\n# Le serveur API \u00e0 utiliser lors de la configuration de kubectl pour l'utilisateur\napiServerURL: \"https://kube-apiserver.yourcluster.com\"\n</code></pre>"},{"location":"fr/how-it-works/how-it-works/","title":"Comment \u00e7a fonctionne","text":"<p>Kubernetes prend en charge OpenID Connect (OIDC) comme m\u00e9canisme d'authentification des utilisateurs. OIDC est un protocole d'authentification qui permet aux serveurs de v\u00e9rifier l'identit\u00e9 d'un utilisateur via un jeton d'identit\u00e9 (ID Token).</p> <p>Lors de l'utilisation d'OIDC pour s'authentifier aupr\u00e8s de Kubernetes, le client (par exemple, <code>kubectl</code>) envoie le jeton d'identit\u00e9 avec toutes les requ\u00eates au serveur API. Du c\u00f4t\u00e9 serveur, le serveur API de Kubernetes v\u00e9rifie le jeton pour s'assurer qu'il est valide et n'a pas expir\u00e9. Une fois v\u00e9rifi\u00e9, le serveur API extrait les informations de nom d'utilisateur et d'appartenance \u00e0 des groupes du jeton, et continue le traitement de la requ\u00eate.</p> <p>Pour obtenir le jeton d'identit\u00e9, l'utilisateur doit passer par le processus d'authentification OIDC. C'est l\u00e0 que Gangway intervient. Gangway est une application web qui permet le flux d'authentification OIDC qui r\u00e9sulte dans la cr\u00e9ation du jeton d'identit\u00e9.</p> <p>Gangway est configur\u00e9 comme un client d'un service d'identit\u00e9 en amont qui parle OIDC. Pour obtenir le jeton d'identit\u00e9, l'utilisateur acc\u00e8de \u00e0 Gangway, initie le flux OIDC en cliquant sur le bouton \"Se connecter\", et compl\u00e8te le flux en s'authentifiant aupr\u00e8s du service d'identit\u00e9 en amont. Les identifiants de l'utilisateur ne sont jamais partag\u00e9s avec Gangway.</p> <p>Une fois le flux d'authentification termin\u00e9, l'utilisateur est redirig\u00e9 vers une page Gangway qui fournit des instructions sur la fa\u00e7on de configurer <code>kubectl</code> pour utiliser le jeton d'identit\u00e9.</p> <p>Le diagramme de s\u00e9quence suivant d\u00e9taille le flux d'authentification :</p> <p></p>"}]}